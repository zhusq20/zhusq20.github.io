<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BERT-GNN</title>
      <link href="/2022/07/14/blog8/"/>
      <url>/2022/07/14/blog8/</url>
      
        <content type="html"><![CDATA[<p><strong>Motivation:</strong> 目前的GNN模型过于依赖于节点之间的连接，因此导致了假死问题和过拟合问题，还有就是不能分布式训练的问题。</p><p><strong>Method:</strong> 针对上述问题，我们提出一种新的图神经网络模型GRAPH-BERT ，同样是非常火的『pretrain+fintune』范式应用于图网络中。该模型只依赖于注意力机制，不涉及任何的图卷积和聚合操作。</p><ul><li>论文：<a href="https://arxiv.org/abs/2001.05140">Graph-Bert: Only Attention is Needed for Learning Graph Representations</a></li><li>代码：<a href="https://github.com/jwzhanggy/Graph-Bert">CLICK HERE!</a></li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p><img src="https://s2.loli.net/2022/07/14/viG6oTbzqEY3SBt.png" alt="1.png"></p><p>Graph-Bert 主要由五个部分组成:</p><ol><li>将原始图分解为无边子图集合，这一步属于预处理部分。具体来说，对于每个目标节点，根据节点之间的相似度分数选取前K个节点作为目标节点的上下文节点。</li><li>节点输入特征的嵌入表示。本文考虑四种节点的特征：(1) raw feature vector embedding, (2) Weisfeiler-Lehman absolute role embedding, (3) intimacy based relative positional embedding, and (4) hop based relative distance embedding。这一步也是预处理。 </li><li>graph-transformer based encoder，编码器的输出作为学习到的节点特征表示。</li><li>representation fusion。主要考虑节点属性重建以及图结构恢复任务。</li><li>the functional component. the functional component and learning objective (i.e., the loss function) will be different.</li></ol><p>训练出来的Graph-Bert还可以根据下游任务进行微调。比如对于节点分类任务，可以使用分类损失函数微调。</p><p>个人认为Part 4是为了pretraining, Part 5是为了finetuning</p><p>为了更好地处理大图（并行化），graph-bert选择在采样子图上进行训练。使用了一种基于图亲密度矩阵S</p><p>计算公式为：$S=α·{(I-(1-α)·\overline{\text{A}}})^{-1}$</p><p>alpha是超参数，A是邻接矩阵，D是对应的对角矩阵。</p><p><img src="https://s2.loli.net/2022/07/14/zfdHDKp5U3Xx9aF.png" alt="2.png"></p><h3 id="结点embedding"><a href="#结点embedding" class="headerlink" title="结点embedding"></a>结点embedding</h3><p>由于经过采样出来的结点们是无序的，这里按照  与target node的亲密度打分  来对结点集合进行排序。结点emdedding由四部分组成</p><p><strong>「1. 原始特征embedding」</strong></p><p>就是使用一个映射操作将原始特征表示到新的共享的特征空间，对于不同的输入可以有不同的映射函数，如CNN/LSTM/BERT等</p><p><img src="https://s2.loli.net/2022/07/14/ZcjHTQ3rs2yzENe.png" alt="2022-07-14-14-03-00-6ad667d8999c8c80cd2258c0637020b.png"></p><p>Xj是节点Vj的原始特征，可以是one-hot，n-hot等等</p><p><strong>「2. Weisfeiler-Lehman 绝对角色embedding」</strong></p><p>Weisfeiler-Lehman算法是用来确定两个图是否是同构的，其基本思路是通过迭代式地聚合邻居节点的信息来判断当前中心节点的独立性(Identity)，从而更新整张图的编码表示。</p><p><img src="https://s2.loli.net/2022/07/14/HLfiB1S9aEyCVWU.png" alt="2022-07-14-14-31-40-460535e760540c20cef66ffcf00902a.png"></p><p>注：结点WL值（即颜色）是用完整图计算的，在不同子图上不变。</p><p><img src="https://img-blog.csdnimg.cn/20201211004425840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWxpemhhbmc=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><strong>「3. 基于亲密度的相对位置embedding」</strong></p><p>上一节计算的嵌入可以表示全局的信息，而这一步主要是获取局部信息。</p><p>对无连边中子图结点的相对顺序进行了编码。该顺序就是按邻居结点与目标结点的亲密度来排序的，依次是[目标结点，与其最亲密的邻居1，与其次亲密的邻居，…]。</p><p><img src="https://s2.loli.net/2022/07/14/zoK8NTPmhg3jeyQ.png" alt="2022-07-14-14-06-18-b40753983d75274059c34869bde481d.png"></p><p><strong>「4. 基于相对距离embedding」</strong></p><p>对两个结点在原始大图中的距离（间隔边的数量）进行embedding表示，主要是为了平衡上述两步的embedding</p><p><img src="https://s2.loli.net/2022/07/14/qw9T7yNdW1O2IjQ.png" alt="2022-07-14-14-07-02-4eafb7e72bfa55351c217905a0dc432.png"></p><p>H是相对距离</p><h3 id="Transfomer编码器"><a href="#Transfomer编码器" class="headerlink" title="Transfomer编码器"></a>Transfomer编码器</h3><p><strong>「输入」</strong></p><p>首先是对前面得到的四个embeeding进行聚合，</p><p><img src="https://s2.loli.net/2022/07/14/nG1Z4QoVPjNMRHT.png" alt="2022-07-14-14-08-18-527b76e42a7eee766b386e1e5d90f36.png"></p><p>聚合的函数有很多可以选择，文章里作者就使用了最简单的加和操作。聚合之后就可以得到所有结点的输入表示：</p><p><img src="https://s2.loli.net/2022/07/14/Xh9LpdjxVDzwfWE.png" alt="2022-07-14-14-08-53-673542d76fd7efb9fb44ffa6b88ff58.png"></p><p><strong>「更新」</strong></p><p>然后就是进行N层的transformer encoder的迭代更新，</p><p><img src="https://s2.loli.net/2022/07/14/wF4WMgEO9NQTlUy.png" alt="2022-07-14-14-09-27-a1552716f2122a1f28392142ab61cb2.png"></p><p><strong>「输出」</strong></p><p>经过D层的编码之后，我们就可以得到对应每个结点的表示，</p><p><img src="https://s2.loli.net/2022/07/14/4KiBpvJsPbRUc6F.png" alt="2022-07-14-14-09-56-96d2d601ab512d0eddd7fee684ba134.png"></p><p><img src="https://s2.loli.net/2022/07/14/BoCkEIvhuWqeAGs.png" alt="2022-07-14-14-39-09-8bcb355bdf69b585be5195318e8ddc8.png"></p><h3 id="Pre-training"><a href="#Pre-training" class="headerlink" title="Pre-training"></a>Pre-training</h3><p>在模型预训练阶段，分为结点原始属性重构任务和结构重构任务。<br>1）Task 1: Node Raw Attribute Reconstruction</p><p>对于目标结点$v_i$, 原始特征为$x_i$, 我们通过GRAPH-BERT编码层可以得到其隐藏表示$z_i$， 然后经过一层FC映射后得到<img src="https://s2.loli.net/2022/07/14/her8QSKbzknApRf.png" alt="2022-07-14-14-14-48-3d81fb0450971b22c480cdaecef1423.png"></p><p>希望重构的属性值越接近真实值越好:</p><p><img src="https://s2.loli.net/2022/07/14/W2m7vXlLhF1jiaQ.png" alt="2022-07-14-14-40-44-c5afa9d36927a54adbe7e85168556df.png"></p><p><img src="https://s2.loli.net/2022/07/14/Hzm3BnN2AY4atF9.png" alt="2022-07-14-14-41-56-41f6d8db5a6c0156dfeca6f62db5589.png"></p><h3 id="Finetuning"><a href="#Finetuning" class="headerlink" title="Finetuning"></a>Finetuning</h3><p>在文章中介绍了两个微调任务：「节点分类」<strong>和</strong>「图聚类」，效果看着都不错的样子。最后作者还加上了ablation study，分析了一些模型设置的效果，比如采样子图的结点数k，初始embedding，是否进行预训练等等。</p><p>在结点分类任务时，只是在结点原始属性重构任务中用到的全连接层后面加上了激活函数，然后对其进行重新训练。</p><p><img src="https://s2.loli.net/2022/07/14/Gk5eR13PNuFtEAQ.png" alt="2022-07-14-14-29-19-0cbd4e246267de9348b9fceb8a5b263.png"></p><p>在图聚类任务中，直接使用了$z_i$，采用K-means算法。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 图神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GNN </tag>
            
            <tag> BERT </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS 224W</title>
      <link href="/2022/07/13/blog7/"/>
      <url>/2022/07/13/blog7/</url>
      
        <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>赶due人赶due魂</p><h1 id="lecture1"><a href="#lecture1" class="headerlink" title="lecture1"></a>lecture1</h1><blockquote><p>most real world networks are sparse.<br>consequence: adjacency matrix is filled with zeros!<br>so we don’t usually represent graphs as matrices</p><p>we can also add attributes to edges.<br>how to encode these attributes? weighed graph!<br>More types of graghs: 自环，多边图(multigraph)</p><p>连通无向图<br>非连通图的矩阵特性：块对角矩阵</p><p>强联通和弱联通</p></blockquote><h1 id="lecture2"><a href="#lecture2" class="headerlink" title="lecture2"></a>lecture2</h1><blockquote><h3 id="Degree-distribution"><a href="#Degree-distribution" class="headerlink" title="Degree distribution"></a>Degree distribution</h3><p>P(k): probability that a random node has degree k</p><h3 id="Paths-in-graph"><a href="#Paths-in-graph" class="headerlink" title="Paths in graph"></a>Paths in graph</h3><h3 id="Distance-in-graph"><a href="#Distance-in-graph" class="headerlink" title="Distance in graph"></a>Distance in graph</h3><p>有向图中，距离不是对称的</p><h3 id="Network-Diameter"><a href="#Network-Diameter" class="headerlink" title="Network Diameter"></a>Network Diameter</h3><p>任意两个节点的距离中的最大值<br>不好用，例如一条路径，路径长度就是直径。但这个上界太大了</p><h3 id="Avg-path-length"><a href="#Avg-path-length" class="headerlink" title="Avg path length"></a>Avg path length</h3><p>任意节点的平均距离</p><h3 id="clustering-coefficient-for-undirected-graphs-only"><a href="#clustering-coefficient-for-undirected-graphs-only" class="headerlink" title="clustering coefficient (for undirected graphs only)"></a>clustering coefficient (for undirected graphs only)</h3><p>某个节点的邻居的连通程度</p><p>Connected components<br>最大连通子图，等等</p><h3 id="Random-Graph-Model"><a href="#Random-Graph-Model" class="headerlink" title="Random Graph Model"></a>Random Graph Model</h3><blockquote><h4 id="Erods-Renyi-Random-Graphs"><a href="#Erods-Renyi-Random-Graphs" class="headerlink" title="Erods-Renyi Random Graphs"></a>Erods-Renyi Random Graphs</h4><blockquote><h5 id="Two-variants"><a href="#Two-variants" class="headerlink" title="Two variants"></a>Two variants</h5><p>$G_{np}$ : n节点无向图，每一对节点有p的概率出现</p><p>intersting facts:</p><p>degree distribution is <u>binomial</u></p><p>平均度数是p(n-1)</p><p>方差与平均度数的比值随着n的增大而减小（中心极限定理CLT），说明当节点数很大时，近似看成每个节点都有相同的度数，即平均度数</p><p>图的直径是节点数目的对数</p><p>$G_{nm}$ : n节点无向图，m边随机分配</p></blockquote></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EECS </tag>
            
            <tag> GNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown编辑器</title>
      <link href="/2022/07/13/blog6/"/>
      <url>/2022/07/13/blog6/</url>
      
        <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>Typora收费已有好几个月</p><p>按理说可以通过下载Typora历史版本白嫖</p><p>但今天中午，我突然发现历史版本被禁用了</p><p>由于不想付15刀买软件，我开始寻找Typora的替代品</p><h1 id="MarkText"><a href="#MarkText" class="headerlink" title="MarkText"></a>MarkText</h1><ul><li><p>界面和Typora完全一致</p></li><li><p>没有汉化版</p></li><li><p>Redo（姑且称作后溯？）快捷键是 <code>ctrl+shift+z</code>，而不是 <code>ctrl+y</code>，非常奇葩</p></li><li><p>打一段文字，在两秒内删除，会导致Undo（前溯）和Redo都不体现这个操作。解释如下：</p><blockquote><p> <a href="https://github.com/stefnotch">@stefnotch</a> Mark Text will generate a <code>history</code> after you stop typing for 2 seconds.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for saving memory and improve Mark Text performance</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">historyTimer</span> = <span class="built_in">setTimeout</span>(handler, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p> So when you type some text, but you delete them immediately! it will not    generate a history in Mark Text, it caused <code>CTRL + Z</code> doesn’t do anything.</p></blockquote></li><li><p><code>ctrl+E</code> 可以实现代码和渲染文字的切换</p></li><li><p><code>ctrl+int</code>调整Header的功能貌似不行？</p></li></ul><h1 id="Joplin"><a href="#Joplin" class="headerlink" title="Joplin"></a>Joplin</h1><ul><li><p>pros: 支持各种网盘，实时同步；跨平台；端对端加密…</p></li><li><p>以上优点，我完全用不上</p></li><li><p>cons: 设置Joplin为md文件默认打开方式并没有用，你还是得先打开Joplin，再把md文件import到软件里，太麻烦</p></li><li><p>可能适用于CLI用户吧，我不喜欢</p></li></ul><h1 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h1><ul><li>不熟悉markdown语法的话，最好别用</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>MarkText凑合用吧，注意一下快捷键规则qwq</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS 61C</title>
      <link href="/2022/07/12/blog5/"/>
      <url>/2022/07/12/blog5/</url>
      
        <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>如果选不上就很尴尬了</p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><blockquote><p>暑假预习一下</p></blockquote><h2 id="上课"><a href="#上课" class="headerlink" title="上课"></a>上课</h2><blockquote><p>也许只需要上lab？</p></blockquote><h2 id="整理文档"><a href="#整理文档" class="headerlink" title="整理文档"></a>整理文档</h2><blockquote><p>po到github</p></blockquote><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><blockquote><p>课程替代</p></blockquote><h1 id="预习-1"><a href="#预习-1" class="headerlink" title="预习"></a>预习</h1><h2 id="lecture1"><a href="#lecture1" class="headerlink" title="lecture1"></a>lecture1</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>都学过，记录一些术语</p><h4 id="sign-amp-magnitude"><a href="#sign-amp-magnitude" class="headerlink" title="sign &amp; magnitude"></a>sign &amp; magnitude</h4><blockquote><p>原码<br>第一位(MSB)表示符号，其余表示绝对值大小<br>有2个0</p></blockquote><h4 id="one’s-complement"><a href="#one’s-complement" class="headerlink" title="one’s complement"></a>one’s complement</h4><blockquote><p>反码<br>正数的反码和原码一致<br>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.<br>最大值overflow变成最小值</p></blockquote><h4 id="two’s-complement"><a href="#two’s-complement" class="headerlink" title="two’s complement"></a>two’s complement</h4><blockquote><p>补码<br>正数的补码和原码一致<br>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)<br>state of the art binary representation</p></blockquote><h4 id="sign-extension"><a href="#sign-extension" class="headerlink" title="sign extension"></a>sign extension</h4><blockquote><p>带符号扩展<br>正数：增加前导0即可<br>负数：- sign and magnitude: add 0’s after the sign bit</p><pre><code>       - 反码&amp;补码: copy MSB(即最左边的bit)</code></pre></blockquote><h2 id="lecture2"><a href="#lecture2" class="headerlink" title="lecture2"></a>lecture2</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>这门课用c<br>我学c plus<br>C没有class</p><h3 id="Basic-C-Concepts"><a href="#Basic-C-Concepts" class="headerlink" title="Basic C Concepts"></a>Basic C Concepts</h3><h4 id="compilation"><a href="#compilation" class="headerlink" title="compilation"></a>compilation</h4><blockquote><p>C compilers map C programs into architecture specific machine code. CPU interprets and run the machine code.</p><p>Java converts to architecture independent bytecode(run by JVM)</p><p>python directly interprets the code</p><h5 id="C语言-编译-特性的优点"><a href="#C语言-编译-特性的优点" class="headerlink" title="C语言 编译 特性的优点"></a>C语言 编译 特性的优点</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> Makefile让我们只用编译修改过的文件</span><br><span class="line"><span class="bullet">-</span> excellent runtime performance</span><br></pre></td></tr></table></figure><h5 id="C语言-编译-特性的缺点"><a href="#C语言-编译-特性的缺点" class="headerlink" title="C语言 编译 特性的缺点"></a>C语言 编译 特性的缺点</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> compiled files are architecture-specific(CPU &amp; OS)</span><br><span class="line"><span class="bullet">-</span> debugging很麻烦，edit-&gt;compile-&gt;run, 而不是edit-&gt;run</span><br></pre></td></tr></table></figure></blockquote><h4 id="variable-types"><a href="#variable-types" class="headerlink" title="variable types"></a>variable types</h4><blockquote><p>int short long char float double, etc.</p><p>chracters aka char</p><p>char c = ‘a’, or char a = 97.</p><p>ASCII standard defines 128 chars <a href="https://www.asciitable.com">ASCII</a>, in theory, 7 bits are enough</p><p>but a char takes up 1 byte.</p><p>add a bit to round up to 1 byte since computers deal with multiple of bytes.</p><p>C语言可以强制类型转换，本质上是分配空间的不同（enen if it doesn’t make sense）</p><h5 id="type-functions-in-C"><a href="#type-functions-in-C" class="headerlink" title="type functions in C"></a>type functions in C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function prototypes</span></span><br><span class="line"><span class="comment">declaring the prototype of a function allows u to use it before it&#x27;s defined.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_func</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function definitions</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_func</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将prototype写入headerfile，可以让其他人把你的代码作为library来引用</p><h5 id="struct-alignment-and-padding-in-C"><a href="#struct-alignment-and-padding-in-C" class="headerlink" title="struct alignment and padding in C"></a>struct alignment and padding in C</h5><p>汇编学过，CSAPP tql！</p><h5 id="C-amp-JAVA-比较"><a href="#C-amp-JAVA-比较" class="headerlink" title="C &amp; JAVA 比较"></a>C &amp; JAVA 比较</h5><p><a href="http://www.cs.princeton.edu/introcs/faq/c2java.html">click here</a></p></blockquote><h3 id="C-syntax"><a href="#C-syntax" class="headerlink" title="C syntax"></a>C syntax</h3><blockquote><h5 id="Generic-C-Program-Layout"><a href="#Generic-C-Program-Layout" class="headerlink" title="Generic C Program Layout"></a>Generic C Program Layout</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_files&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;local_files&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> macro_name macro_exper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* declare functions */</span></span><br><span class="line"><span class="comment">/* declare global vars and structs */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="comment">/* the innards */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* define othr functions */</span></span><br></pre></td></tr></table></figure><h5 id="C-syntax-in-main"><a href="#C-syntax-in-main" class="headerlink" title="C syntax in main"></a>C syntax in main</h5><p>argc: 文件相对路径 和 pointer 的总数</p><p>argv: an array of pointers to the arguments as strings</p><p>eg. </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./foo hello 87</span><br></pre></td></tr></table></figure><p>here argc=3,argv[0]=”./foo”,argv[1]=”hello”,argv[2]=”87”</p></blockquote><h3 id="control-flow"><a href="#control-flow" class="headerlink" title="control flow"></a>control flow</h3><p>nothing special</p><blockquote><ul><li>if else</li><li>while</li><li>for</li><li>switch </li></ul></blockquote><h3 id="pointers"><a href="#pointers" class="headerlink" title="pointers"></a>pointers</h3><blockquote><ul><li>int *x <ul><li>declare variable x as the addr of an int</li></ul></li><li>x = &amp;y<ul><li>&amp; is called “addr operator”，取址运算符</li></ul></li><li>z = *x<ul><li><code>*</code> called “deference operator”，取消引用运算符</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI劝退文</title>
      <link href="/2022/07/12/blog4/"/>
      <url>/2022/07/12/blog4/</url>
      
        <content type="html"><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>树洞文章，记录一下</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>AI长文劝退，慎进<br>背景：RL相关方向博二在读，ICML一篇<br>这几天看到树洞里面好多人说劝退AI的，但总感觉没说到点子上，我来大致说一说我的看法吧，欢迎打脸。<br>第一点，也是最重要的，就是当下AI落地困难。从12年AlexNet到16年Alpha Go，这个时间段实际上是AI应用爆发的高产期，像Google包括旷世都是在这个时期做起来的，但是时间沉淀到了现在，也就视觉落地做得比较成熟，而且基本上能做的已经做的差不多了。我来谈谈具体情况：目前视觉这方向落地炒得最火的就是无人驾驶，像特斯拉，谷歌，百度，腾讯还有一些汽车企业都在搞这件事情，但现实是很多企业的自动驾驶顶多L2L3，甚至连L4都达不到。讲一个真实的案例：之前特斯拉有一期重大的自动驾驶事故，就是一个大卡车翻车了，后面的特斯拉直接就撞了上去，后来原因调查是由于大卡车是银白色的，没什么像素点，因此特斯拉将它识别成了白云，于是直接撞了上去。向这些都是在搞视觉的重大困难，像我们开车可能前面有一片树叶或者是一滩水，我们会直接过去，但是AI会减速来避障，目前我们只能去一个一个在测试中完善特殊情形，但是现实总有你测试不到的地方。之前曾经和楼天城聊过（不知道的自己百度），应该属于国内搞自动驾驶的第一批人了，和他聊讲他已经不再搞通用自动驾驶了，而是聚焦于货运物流的自动驾驶，因为货运的情形相对简单一些，并且他说通用的人工驾驶可能永远也搞不出来，没有AGI，光靠Deep Learning是做不出来通用人工驾驶的，但是AGI能否实现是个很大的问题。这是视觉部分，但其实很多地方也都是同理。Deep Learning在很多领域表现不错，但也仅仅是一个demo而已，具体到实际中都是很难实现的，这些demo大部分都得在实验室的环境下才行。之前导师和旷世合作一个项目，做异常点检测，但实际上异常点的样例远远不到我们平时训练数据集的量。AI从18，19年到现在，实际上真正的利润价值并没有创造多少，像之前一直炒作的AI+医疗（智慧医疗），Google在2019年（可能时间有一点出入）就宣布解散智慧医疗的团队了，当时的原因就是资金困难加上没有成果，本来是Google最有希望的一个项目，Facebook好像也解散了AI研发团队而去搞元宇宙了（x），落地困难是一件很现实的问题，尤其是在疫情影响经济下行的现在，不能创造价值会导致很多之前敢浪潮的小公司倒闭。<br>那很多人说AI可以搞学术或者去大厂卷算法，我只想说如果你现在已经读AI博了，那硬着头皮读下去吧（dz也一样），毕竟清华博士吃饭应该还不愁问题。但是如果你现在大二或者大三，建议慎重考虑。因为等你们读完博士到工作，可能至少还得6，7年，到那时候AI很有可能到了一个深水区，人才饱和，做学术也很难搞大的提升，同时落地问题感觉不会太好解决。据我所知，现在好多学校都有AI本科生了，到那个时候他们都毕业了，人才会更饱和。至于工作，有一说一以我的观点来看，只要是信息相关的，如计算机电子自动化，甚至数理基础好有编程底子的工科生，来搞算法完全没有问题，但是如果说AI下行，大部分人的代码能力和专业知识是没法和搞网络，数据库，高性能的人相比的，AI的代码懂得都懂，我自己也在联系导师看做一些偏底层的一些东西。像我本科是电子系的，我们那届有好多大牛也去搞AI了，但是我现在对于我本科学的那些基本上都不太记得了，想转方向还是很困难的。<br>目前学界的方向也从原来的算法转向感知了，不是说你提出一个网络结构就可以的了，建议真心想搞AI的同学，也不要一味只会去搞算法，但AI当下另一个很大的瓶颈就是可解释性不足。很多人在搞可解释性的工作，拿网络中间的某一层，看说我们的网络学到了什么什么，但我觉得都很扯，我们之前也搞过相关工作，最后发现model的判断依据完全没有道理可言，往往区分不同的物品不是通过物品特征而是通过颜色形状等等。<br>最后给还想入坑的同学说说方向吧，当然也是我个人的偏好。我自己以前偏硬件，所以不是很喜欢搞算法那些。那些算法其实和我们想的传统算法还是有很大区别的，而且有点虚。像我自己觉得用GAN搞那种什么AI作画，风格迁移之类的是一件很无聊的事情。我自己搞RL也是觉得这个东西可能理论基础更好一些？但是也是高不高低不低，RL属于学界大家十分看好，但是业界几乎没有应用的一个东西。主要的一个原因就是RL的训练cost要非常非常大。因此目前RL还是一个比较只适合做学术的东西。我觉得可能受AI下行影响比较小的是做ML thery的，做learning theory的，包括可能RL theory的，但是不太建议在国内做，国内这方面水平强的不多。然后如果编程和硬件底子好的可以尝试做MLsys的，这个是目前国外很火的一个方向，但其实AI的东西不是很多。最后我个人比较看好的是AI for science这个领域，我觉得在近期如果AI能做出重大突破可能会是这个方向，但实际上这个方向不太适合纯计算机的同学，更适合science相关方向的同学。像之前出这个science有一个核聚变控制的和预测蛋白质结构的，我们组里也讨论过，看是能大致能看懂，但是论专业知识还是搞不来。非常建议生化环材想转码的同学，其实这个方向非常适合你们，毕竟已经是天坑了，转到另一个天坑也不亏，搞不好还能是热点，有一定门槛不用被搞算法的人卷爆还方便你们转码。还有人搞AI+金融的，这个方向不太了解，欢迎懂哥补充。<br>以上。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 社会观察 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cogito,ergo sum</title>
      <link href="/2022/07/12/blog3/"/>
      <url>/2022/07/12/blog3/</url>
      
        <content type="html"><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>之前有读过 <a href="https://trinkle23897.github.io/posts/application">n + e 学长的申请回忆</a>，总归还是自己也想写一写</p><ul><li>作为大学生活的留念</li><li>也许能帮助以后的贵系后来人</li></ul><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><ul><li><p>中介碰瓷</p><blockquote><p>信息毕竟很重要</p></blockquote></li><li><p>选校项目</p><blockquote><p>这个专栏写心水的学校和项目</p></blockquote></li><li><p>学业科研</p><blockquote><p>记录学业与科研规划，太长的单独写，比如 UGVR MILA </p></blockquote></li><li><p>各式费用</p><blockquote><p>我的预算大概 MS 70 w，然后交换 + 暑研 30 w，PhD 还在考虑</p></blockquote></li></ul><p><code>to be continued...</code></p><h1 id="中介碰瓷"><a href="#中介碰瓷" class="headerlink" title="中介碰瓷"></a>中介碰瓷</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单纯信息的话，渠道不少——上古贵系大神，实验室学长学姐，清华的同学人脉，一亩三分地，知乎。</p><h2 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h2><ul><li><p>目前正在碰瓷过程中，试了试：</p><ul><li>世毕盟</li><li>新东方</li><li>再来人</li><li>棕榈大道</li><li>中枢</li></ul></li></ul><h2 id="新东方"><a href="#新东方" class="headerlink" title="新东方"></a>新东方</h2><ul><li>氛围挺不错，给了我一些以前没考虑到的信息，比如学费问题还有学校信息，推销氛围不是特别强</li><li>答应 7 号给我一些关于专业介绍和学校的资料</li><li>和我想的道路基本一样，新东方认为 MS 不用太卷 research，然后给我安利了金融工程，但是讲的没有棕榈大道那么可怕</li><li>至少告诉我 UW 没有 MS，然后关于费用，给我讲了讲学分费用和学费的区别，可能读 MS 费用差别都不大</li><li>告诉我，至少以我目前的硬件，自己 DIY MS 应该可以申到前十的学校，而 PhD 估计得降低到前三十</li><li>简单讲了讲套磁的事情，科研套磁是硬做项目，但是还有很软的背景提升，就是找几个教授给你讲几节课，当做一个项目，一次两三万，貌似和新东方那个爱科研背景提升有关系</li><li>我觉得那个完全没用。第一，这是项目经历，不是科研经历，对申请 PhD 个人觉得没啥用。第二，可以看出是一些 professor 恰烂钱的方式。第三，要真的把你骗去读博士了，我觉得这些东西都没碰到研究，真的研究和这些水课差距可大了</li></ul><h2 id="棕榈大道"><a href="#棕榈大道" class="headerlink" title="棕榈大道"></a>棕榈大道</h2><ul><li><p>说话直白些，给我讲了讲金融工程的事情，比如申请路线很不一样，完全是按照实习 + GPA 来的，而且申请顶级的金融工程六大，还要什么五段实习 + GPA。然后安利了普林斯顿和 CMU 的金融工程，目测绝对很贵</p></li><li><p>这些要求都是次要的，主要是，告诉我没法犹豫，我肯定没法犹豫一年，而且干了这行绝对没有 PhD，也很难搞 SE 了</p></li><li><p>对我给出的初步选校 list 进行了一波乱杀，我给的那些心水的学校</p><blockquote><p><code>UW ~ UIUC ~ GT ~ UCLA ~ UT-Austin ~ UCB ~UCI ~ UCSB &gt; CMU</code></p></blockquote><p>基本只有 UIUC、UCLA、CMU 有比较像样的硕士，这一部分会在选校项目那一节慢慢研究</p></li><li><p>讲了讲 UIUC 的情况</p><blockquote><p>UIUC 学术很顶尖，就业不太行，专业很强，计算机系人口基数很大，仅次于 CMU 和南加大</p><p>招生也很多，如果 MIT 一年招不到 5 个大陆本科的 PhD 的话，UIUC 会招三十个</p></blockquote></li><li><p>讲了讲 UCB 的 MEng，直接给我说比较水，但是和世毕盟给我讲的不太一样</p><blockquote><p>UCB 的 MEng 一年制，项目比较水，太短了，授课时间 9 个月，认可度不高</p></blockquote></li><li><p>科普了下 CMU 的硕士情况，首先告诉我基本是我的 list 里面最难的，又给我讲其实还行</p><blockquote><p>1700 硕士生里有 1000 中国人，其中陆本 600 人，你难道排不进陆本前 600 吗？</p></blockquote></li><li><p>说了说斯坦福的硕士，每年就个位数，可以当做冲刺校</p></li><li><p>客观给我讲了讲中介的帮助，就是套磁，硕博混申啥的，我觉得没啥吸引力</p></li><li><p>从就业角度给我讲了讲</p><blockquote><p>如果我想搞 AI ，那 MS 不太够，但是想做数据行业， MS 就够了</p></blockquote></li><li><p>推销了他们的服务，甚至搬出了 inter 高层总裁啥的。这不得给我笑死，我还能说，我认识微软亚研院的创办者呢！—— 推销嫌疑太大，我不喜欢，反正我也就碰瓷而已</p></li><li><p>讲了讲 UGVR 暑研的事情，我觉得很有必要，所以单独为此写了暑研的笔记</p><blockquote><p>UCLA 会给部分的清华学生资助，让他们去 UCLA 暑研八周到十周。</p><p>八周到十周当然是难以出结果的，但是好歹会让教授全面考察自己。</p><p>优秀的人可以拿到口头的 PhD 预录取</p></blockquote></li><li><p>UGVR、CSST——这不就是国内的保研夏令营🐴，搞得那么牛b哄哄的样子</p></li><li><p>关于学费给我讲了讲</p><blockquote><p>CMU 贵是贵，但是和 UCLA 差不了太多，毕竟 LA 的物价远高于匹兹堡。</p><p>CMU 业界认可度高，甚至远高于公立学校</p></blockquote></li><li><p>语言成绩建议我早点考出来，因为暑研申请可能要用</p><blockquote><p>刚过百甚至九十多都可以，但是托福总归要有。你可以去加拿大刷分，但是最好还是在国内考一个。</p><p>考虑到 UGVR 这些是大三上申请，所以下个夏天准备托福挺重要的。</p></blockquote></li><li><p>暑研和伯克利春季学制冲突问题都不大，因为这个可以灵活安排。</p></li></ul><h2 id="世毕盟"><a href="#世毕盟" class="headerlink" title="世毕盟"></a>世毕盟</h2><ul><li><p>吃完饭简单交流了下，我记得不是很全，但是他们推销厉害——世毕盟是这几年 CS 申请最强的了——一听就不是我的菜</p></li><li><p>给了我一些资料，个人觉得还蛮有用，放在了云盘上</p></li><li><p>和前两家机构很不同的是，世毕盟的联系人和我的观点很像</p><blockquote><p>未来变数很多，成绩、科研、兴趣这些，变化很大</p></blockquote></li><li><p>有一点值得注意，世毕盟提出了 CS 申请的特殊性</p><blockquote><p>CS MS 也卷的厉害，光 GPA 和 GT 不行，科研得卷起来</p></blockquote><p>我对科研之于 MS 的看法虽然不如前两家机构乐观，但是也没这么悲观，但是无论如何，科研都得继续</p></li><li><p>提了几句跨申 CS 的例子，外文系同学申请到了 CMU AI 云云</p></li></ul><h2 id="中枢"><a href="#中枢" class="headerlink" title="中枢"></a>中枢</h2><ul><li>氛围挺好，价格 2.98 W CNY，给我打九折</li><li>因为现在硕博申请越来越同质化，所以不用太纠结硕博，本质上就是混申</li><li>不过混申有主次之分，我个人理解还是假期的区别，如果我主申 MS，那么假期实习重要，如果我主申 PhD，那么科研重要，对于 MS 而言，科研和实习可以替代</li><li>个人感觉，如果我主要是奔着 CMU 的 1.5 year MS 去的话，假期实习去国内大厂也很好，估计工资高一些，而且 CMU 本来就业就够强了——还是看谁要我吧，orz，不知道微软亚研院那边是什么情况</li><li>关于转金融这件事情，建议谨慎，MFE 确实有些坑，而且计算机能够向下兼容金融，金融没法向上类型转换</li><li>现在 MS 起薪 15 w ~ 20 w 不成问题</li><li>通过学业来摸索科研这件事情需要存疑，至少比如 HCI CG 这类课，一门课一个项目必须要有，善用 git ，而科研必须给自己设定目标，至少一学期一篇，不论第几作者</li><li>硕士 TA 的确很难，基本不要考虑，MS 70 w 左右的预算是合理但是不悲观的</li><li>安利了小众的 Stanford MSCS，bar 很高，3.9+ GPA，但是感觉没 CMU 有名</li><li>CMU 的业界认可度的确太强了，国内大厂也喜欢，而且业界认可度显著高于 UCLA</li><li>今年秋天之前大概率考完 GRE 吧。 GRE 不考口语，而且保质期长</li></ul><h2 id="再来人"><a href="#再来人" class="headerlink" title="再来人"></a>再来人</h2><p><strong>再来人是最后一家，也是最难缠的一家。参考下方的意识流，就能意识到当时我内心的崩溃感，我最后没有删除，希望给读到这段文字的人一些启发。</strong></p><h3 id="意识流"><a href="#意识流" class="headerlink" title="意识流"></a>意识流</h3><ul><li><p><del>谨防他们用奖学金项目坑人</del></p><blockquote><p>噢，就是成绩特别好的话可以免费帮你申，但是你要回来给他们做宣传</p><p>但是这个其实也不是完全免费，就是你要先交几万块钱，然后托福考到110了退一万，gre考到多少分再退一万</p><p>不会让你白嫖的哈哈哈</p></blockquote></li><li><p>22 年 2 月 6 日下午和再来人聊了聊，他们打了一波广告</p></li><li><p>重点是，再来人说了说他们奖学金的事情，<a href="https://mp.weixin.qq.com/s/ZS9Conj8BLD2dhe3vZaDSg">链接在这儿</a></p></li><li><p>感觉玮杭姐说的那个奖学金项目是充值返现类型的，而再来人奖学金属于生存手册说的那种——</p><blockquote><p>客户是中介聘来的。有的时候，中介宁肯倒贴钱，也会让一些自身条件极为优异的学生成为自己的客户。通常，这些客户的“硬实力”足够强（例如已经发表了世界顶级的论文），不需要什么技巧也有实力冲击全球最顶尖的学校。中介为了打广告，把这些学生拉到自己麾下。这情形无异于当年某些补脑药请高考状元做广告——打死我也不信有哪个状元是靠喝药考出高分的。</p></blockquote></li><li><p>反正，如果我实力够强，我会尽量去试一试申请再来人的奖学金</p></li><li><p>再来人的奖学金有内推密码，我感觉有一点作用，估计是回扣之类的吧，之前中枢也给我说，如果我推荐同学去他们那儿，会有回扣给我</p></li><li><p><del>不得不感谢我的学长学姐，没有给我打广告，还是很良心的</del></p></li><li><p>再来人广告 ing</p></li><li><p>学到和用到的对接性不太强，为什么别人会通过这种方式解决问题</p></li><li><p>恐吓感觉——侧重点偏差，很浅——在恐吓我</p></li><li><p>我相信五分钟内会给我讲学术导师了——</p></li><li><p>组装自己的背景，点对点打击</p></li><li><p>貌似在讲金字塔——博士重点是套磁</p></li><li><p>恐吓性很强——这家大概是给我恐惧心理最强的</p></li><li><p>教授会不会写推荐信</p></li><li><p>六个维度——院校背景，国家，性格，职业路径，行业分布，优势劣势</p></li><li><p>连大二都不前置？</p></li><li><p>劣势：你很自信——自信对我而言是很虚的，自信的维度？</p></li><li><p>避重就轻</p></li><li><p>我的内心其实反复打颤，自己觉得他就是在恐吓我，我的恐惧在增长，然而我的自我意识其实很清楚，他在恐吓我——我自己完全做不了这么多事情，他们给我规划这么多，说实话就是我要不要花钱买人给我做服务，他们说的这么多其实就是在说能给我卖什么服务嘛，然后我也不知道，我花了这份钱后能否得到这些服务——疑惑与恐吓吧，我真的有那么多竞争对手吗，我真的有那么多错误的可能，我真的有假想敌，ok，我的自我意识何其清楚，如果如此销售能够战胜我，那可能太小看我了，哈哈哈</p></li><li><p>我能找出很多问题来，但其实问题只有一个，这些问题和我的目标有关系吗？我的目标是”自我实现“——这才是核心</p></li><li><p>我可以在心里反驳他，但是不必说出来了，哈哈哈</p></li><li><p>到底适不适合我，其实我知道——这些都不是我呢！</p></li><li><p>感觉是焦虑无底洞，所以他们究竟能卖我什么？</p></li></ul><h1 id="选校项目"><a href="#选校项目" class="headerlink" title="选校项目"></a>选校项目</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote><p>找中介碰瓷的意义还是挺好的，我起码得到了专业白皮书，纠正了很多我的不正确认识。虽然我对中介在申请这件事本身上能帮我多少还是挺怀疑的，但是起码学校和项目他们没法骗到我吧，只是我以前连一些信息的名字都不知道，特别是学校和项目</p><p>为了防止世毕盟跳票了，我单独开了一个博客复制了全部学校信息，这个专栏用来做笔记，写写我心水的学校和项目</p></blockquote><h2 id="MS-转-PhD"><a href="#MS-转-PhD" class="headerlink" title="MS 转 PhD"></a>MS 转 PhD</h2><ul><li>北美硕士和博士基本上是独立的，<code>master</code>转<code>phd</code>基本属于重新申请，大概率是<code>2+5</code>不是<code>2+3</code>。本校硕转博，不换老板都有可能<code>2+5</code>, 别提换学校了… 一般就认几个学分，课题啥的都得重新来</li><li>据我观察，不管有没有硕士学位，读<code>PhD</code>的时长都是差不多的。不过少上两年课，研究进展大概能更快一点。但三年<code>PhD</code>毕业不太可能，最多四年毕业，六年甚至七年也是平常……</li><li>怎么说呢，读了<code>PhD</code>就不能太在乎几年毕业了，这里面运气的因素比能力的因素还大</li><li>当然，先读硕士缓冲确实是很好的选择</li></ul><p><code>to be continued...</code></p><h1 id="学业科研"><a href="#学业科研" class="headerlink" title="学业科研"></a>学业科研</h1><h2 id="科研套磁"><a href="#科研套磁" class="headerlink" title="科研套磁"></a>科研套磁</h2><h3 id="在美利坚交流期间的套磁"><a href="#在美利坚交流期间的套磁" class="headerlink" title="在美利坚交流期间的套磁"></a>在美利坚交流期间的套磁</h3><ul><li>关于陶瓷waterloo: UWL CS 的排名主要体现在本科的实习，大牛教授相对其他大学较少。目前上升劲头最强的教授应该是 Jimmy Lin。<a href="https://cs.uwaterloo.ca/current-undergraduate-students/research-opportunities/undergraduate-research-assistantship-ura-program">这里基本是所有招本科生</a>的 CS 教授，可以提前套陶瓷</li><li>关于陶瓷MITACS: 加拿大学校信的效力是介于中国和美国之间的。然而，一般的教授，非 <a href="https://scholar.google.com/citations?user=kukA0LcAAAAJ&amp;hl=zh-CN">bengio 这种级别</a>的信的效力和美国是有明显差距的，特别在于 connection 这一块。美国的一些学校在录取的时候可能会将美国和非美国的信按照不同的标准进行审核，对非美国的信有更低的置信，这就是推荐信方面所应该考虑的。不过至少比国内的非海外博士教授的置信度高多了。</li><li><a href="https://en.wikipedia.org/wiki/Mila_(research_institute">加拿大 mila</a> )</li><li>关于疫情问题，其实只要在家里是可以不戴口罩的。但是一旦出门，无论在美国还是加拿大，不戴口罩的风险都是很大的。但是如果只是（主要）呆在家里，这样和在国内远程研修就没什么区别了。所以其实如果允许的话，远程研修未必不是一个选择，而且还没有高投入。但如果远程研修的话，也不需要局限在美利坚，枫叶国也是可以考虑考虑的。</li><li>贵系里那种传统的教授的信基本可以当做没啥用了，因为他们多半就是让你写信甚至让你交，而委员会筛出这样的信非常容易。但本校年轻的在海外读过书的 new ap，比如茶园的新教授，他们经历过完整的学术训练，也了解推荐信这一套，因此他们的信也能有比较大的效力，可能只是略低于美国普通教授，这也是一个替代选项。</li></ul><h1 id="各式费用"><a href="#各式费用" class="headerlink" title="各式费用"></a>各式费用</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><blockquote><p>我的预算大概 MS 70 w，然后交换 + 暑研 30 w，PhD 还在考虑，<del>甚至觉得 PhD 能够有盈余</del></p><p>但是听很多人讲，我的费用太悲观了，反正我得多了解吧</p><p>这一部分会包括学费，生活费，学分费，交通费，TA RA 工资，实习工资啥的</p></blockquote><h3 id="MS-的费用"><a href="#MS-的费用" class="headerlink" title="MS 的费用"></a>MS 的费用</h3><ul><li>有些学校的 TA 并不提供学费，比如 USC 就只发工资，五万的学费还是躲不掉的</li><li>70w 两年硕不太够… 一年半也很勉强， 如果去的是 CMU 这种 5w USD/yr 的学校估计交完学费就没了</li><li>大部分学校是不接受新生 TA 的， TA 的前提是上过这门课并且要拿到可能 A .. 所以你最早只能从第二学期开始 TA ，如果有些课一年只开一次你甚至只有第二年有机会</li><li>实习一般只有暑假时间，长的四个月短的三个月，现在的行情大概一个月一万刀，还要缴税</li></ul><p><code>to be continued...</code></p><h2 id="REGARDS"><a href="#REGARDS" class="headerlink" title="REGARDS"></a>REGARDS</h2><ul><li>n + e 学长</li><li>Michael 学长</li><li>孙钰翔学长</li><li>zex 学长</li><li>玮杭姐</li><li>雪儿姐</li><li>义淮哥</li><li>毛老师</li><li>srx</li><li>ttn</li><li>slvv</li><li>lambda</li><li>wwq</li></ul>]]></content>
      
      
      <categories>
          
          <category> 出国申请 </category>
          
          <category> 中介 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EECS List</title>
      <link href="/2022/07/12/blog2/"/>
      <url>/2022/07/12/blog2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个本来是世毕盟的推送，但是里面广告太多了</p><p>如果你感兴趣，想要了解广告，<a href="https://mp.weixin.qq.com/s/0xZCdOemTW8ve4VDUklhaQ">链接在这儿</a></p><h1 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h1><p>MIT EECS系，非常大，合计博士700人在读（多个年级合计）。包括EE方向和CS两个大的方向，其中EE主要包括如下子方向：Information, System, and Network Science; Integrated Electronic and Photonic Systems; Physical Science, Devices, and Nanotechnology; Bioelectrical and Biomedical Engineering；而CS主要包括如下子方向：Artificial Intelligence; Computer Systems, Networks, and Architecture; Theory of Computer Science; Bioinformatics and Computational Biology。MIT EECS，世毕盟已经有超过40名学员拿到其PhD录取，就读，甚至从其中博士毕业。</p><p>MIT CS大部分研究组构成了著名的CSAIL（MIT计算机科学与人工智能实验室），部分和数据科学，统计学习有关的研究团队组成了LIDS和IDSS两个统计与数据科学研究机构。CS方向有Ph.D.项目和MEng.项目，但是MEng项目多数情况下只招收MIT本校学生，因此一般认为MIT EECS系只对外招Ph.D.学生，是美国录取率最低的CS项目之一，每年的录取率在1%-5%左右，总共录取150-200人。</p><p>这里补充一下几个顶级学校 (MIT, Stanford, Berkeley, CMU, Princeton) CS PhD的申请。对于PhD的申请来说，标准相对统一，主要针对科研，大部分对GPA看得不重，但对海外经历（包括科研以及交换学期的GPA等）看重，对publication和network极其看中。需要说明的是，近几年的趋势是，顶级学校的PhD项目，已不仅仅是看publication的数量，而更加看中network和推荐信。顶会文章往往只是敲门砖，和教授的network以及获得的海外教授的强推成为了关键。这更加凸显了尽早布局、提前规划以及增加海外科研经历的重要性。</p><p>从申请材料上看MIT CS的博士，雅思和托福都可以用，两者选择其一提交；同时，重要的是MIT EECS系的申请，不需要GRE，所以如果你GRE很低，或者根本没有参加过GRE考试，在申请MIT EECS的时候根本不吃亏。再者，雅思和托福成绩也不太重要，也有人在托福不到100分，也被MIT EECS项目录取。</p><h1 id="UCB"><a href="#UCB" class="headerlink" title="UCB"></a>UCB</h1><p><strong>可以这么说，UC Berkeley的CS的博士录取，在四大计算机神校之中，是最困难的！</strong></p><p>我们这里多谈一下涉及更多人的，Berkeley计算机硕士的情况。MEng，授课型硕士，每年有2000多人申请，录取300人左右。整体录取率在10%-30%。项目时间为1年，偏向于就业，而且是管理者层面的就业，因为从课程设置就可以看出来，管理和CS方面的课程占了一半。一年4门technical课（每门3-4分），两学期的capstone project（总共5分），2门capstone写作课（共2分），6门其它商科课（共6分）。有很多个Track，被定义为CS的（偏软的）差不多是Data Science and Systems 和 Visual Computing 两个Track。在读学生，可以参加capstone project，和教授做工业界或者学术界的科研项目。</p><p>该项目在读时间较短，申请难度在CS四大里面相对不大，就业placement因为地处加州，旁边就是三藩市和硅谷，地理位置占很大优势，就业非常不错。</p><p><strong>该项目的申请技巧性较大，看重的背景与大部分Stanford以及CMU的master有很大不同，对此，世毕盟经过多年摸索，有一套非常完整的经验。世毕盟于2019 Fall有11名学员收获本项目的offer。</strong></p><p>补充：Berkeley CS MS项目招生极少，一般都是在Berkeley本校faculty的推荐下录取，科研导向，类似于最开始没有funding的PhD项目，或者说给Berkeley其他系的博士附加来读一个CS硕士双学位的。</p><h1 id="Stanford"><a href="#Stanford" class="headerlink" title="Stanford"></a>Stanford</h1><p>Stanford University计算机系不需要多介绍。其博士招生有其特别之处。其录取的小方向包括：Artificial Intelligence, Systems, Theory, Graphics, HCI, Biocomputation（合计六个子方向），合计大概全球录取110人左右，其中Artificial Intelligence（人工智能方向）的录取人数，占所有录取人数的50%左右，并且未来可能更多！！！有的小伙伴为了避开竞争激烈的AI方向，而去申请其他方向，不一定是明智的选择（例如HCI方向，只录取2人，且基本不招收中国人，你提交申请的那一刻，基本就等于被拒绝了）。</p><p>硕士方面，由于Stanford地处硅谷，其CS硕士项目就业率非常高。申请难度很高，不亚于tier2的PhD申请难度，但并非只看科研、文章，对申请者背景的独特性有较高要求。MSCS项目包含人工智能、计算生物学、计算机网络安全、人工交互等10个specialization，录取MSCS的学生可自由选择specialization，且TA机会多，很多MSCS的学生都会选择进入著名的计算机科学实验室（如Stanford Artificial Intelligence Lab，Stanford Computer Graphics Lab等），如果master期间和教授做Research，申请Stanford的PhD会容易一些（大概1/2命中率），对申请者的科研背景比较看重，近两年比较注重Diversity，性别/种族等少数群体申请会容易一些。</p><h1 id="CMU"><a href="#CMU" class="headerlink" title="CMU"></a>CMU</h1><p>CMU在众多排行榜上都是CS领域排名第一的美国大学，在全球知名度非常高。它的Master项目超过10个，分别下属于SCS下的各个院系。CMU的项目大致可以分为research-based和course-based两个类别，也可以通过不同院系的下属来分类。CMU的项目申请在项目选择、申请策略以及文书针对性准备三个方面的技巧性很强。</p><p>CMU计算类的硕士项目，主要分布在如下的系/所内部：Computational Biology Department（计算生物系），Computer Science Department（计算机科学系），Human-Computer Interaction Institute（人机交互研究所），Institute for Software Research（软件研究所），Language Technologies Institute（语言科技研究所），Machine Learning Department（机器学习系），Robotics Institute（机器人研究所），合计7个院所。以下只介绍申请的最多的一批计算机类硕士项目：</p><h2 id="MSCS"><a href="#MSCS" class="headerlink" title="MSCS"></a>MSCS</h2><p>Computer Science系下属的授课项目，但也可以广泛联系各个系的教授进行科研，公认的竞争最激烈的CS Master项目之一，申请人数很多同时录取率很低。在CMU的选课有很大的自由度(几乎没有限制)和比较高的优先级。项目本身的workload在CMU里不算特别大，每学期3门课左右。该项目主要招CS科班出身（极少有转专业申请上的情况出现），要求推荐信、publication、GPA等各个方面都很优秀。</p><h2 id="Master-of-Robotics-MSR"><a href="#Master-of-Robotics-MSR" class="headerlink" title="Master of Robotics (MSR)"></a>Master of Robotics (MSR)</h2><p>机器人系下的纯正科研硕士项目，有funding，可以转PhD。这个项目是CMU计算机学院机器人系为了遴选和培养PhD的过渡项目，在申请机器人系PhD的时候可以选择是否同意降转MSR。申请时对科研背景和成果很看重。课程的压力比较小 (每学期2门课，和博士1.2年级一样)每届招30-40人，中国人数量比较少，但最近几年有所提高。申请难度高，基本要求和评价标准类似于PhD。对海外科研看重，喜欢纯正robotics科研出身。</p><h2 id="Master-of-Computer-Vision-MSCV"><a href="#Master-of-Computer-Vision-MSCV" class="headerlink" title="Master of Computer Vision (MSCV)"></a>Master of Computer Vision (MSCV)</h2><p>机器人系下的授课型硕士项目。申请形势同样很火爆。和MSR相比课程压力较大(每学期3-4门课)，定位是毕业找工作，就业形势非常好，同时也有转PhD的可能性。申请难度高，与MSCS接近，看中CV方面针对性的经验，需要提早进行CV方面的布局和经历的积累，讲究学术经验和工业界经验的平衡。世毕盟每年有多名学员成功申请到该项目</p><h2 id="Master-of-Language-Technologies-MLT"><a href="#Master-of-Language-Technologies-MLT" class="headerlink" title="Master of Language Technologies (MLT)"></a>Master of Language Technologies (MLT)</h2><p>语言科学系下的纯正科研硕士项目，有funding，可以转PhD。定位和MSR类似，区别是科研重点在NLP（自然语言处理）方面。如果要转博士，在不换导师的情况下，硕士两年的时间是算在博士的总时长里的。这点和MSR项目相同。是NLP方面理想的项目，可就业可学术。该项目对科研看中，专业要求高，并不一定需要CS出身。世毕盟曾帮助本科信管、EE等专业学员转专业申请到此项目。</p><h2 id="Master-of-Computational-Data-Science-MCDS"><a href="#Master-of-Computational-Data-Science-MCDS" class="headerlink" title="Master of Computational Data Science (MCDS)"></a>Master of Computational Data Science (MCDS)</h2><p>MCDS就是以前CMU大名鼎鼎的VLIS项目，是一个授课型的硕士项目。后来划归到语言科学系下。学生的就业数据非常好，这个项目非常的火，现在是CMU申请人数最多的项目之一。课程压力很大(每学期3-5门)，且大四暑假有暑期课程。可以自己选择18和月或者24月毕业，大部分同学选择18个月方便实习和就业。若想参与科研或多上一些课可以选择24个月。申请方面并不是完全看中科研，但看中背景独特性，需要有针对学员本身背景的特色包装。</p><h2 id="Master-of-Science-in-Intelligent-Information-Systems-MIIS"><a href="#Master-of-Science-in-Intelligent-Information-Systems-MIIS" class="headerlink" title="Master of Science in Intelligent Information Systems (MIIS)"></a>Master of Science in Intelligent Information Systems (MIIS)</h2><p>语言科学系下比较新的授课型项目，申请难度相比前几个项目较小一点。一个学期48个最低学分要求里，有12个学分是和导师做研究或做项目，剩下36个学时基本是三门大课。该项目并不强调CS科班出身，对转专业申请比较友好。</p><h2 id="MSIN，MSIS-MSIT-MOB-MSIT-IS"><a href="#MSIN，MSIS-MSIT-MOB-MSIT-IS" class="headerlink" title="MSIN，MSIS, MSIT-MOB, MSIT-IS"></a>MSIN，MSIS, MSIT-MOB, MSIT-IS</h2><ol><li><p>INI （Information Networking Institute，CMU信息网络研究所）下属的四个项目。INI是由CS、Tepper商学院、公共关系管理学院Heinz College和工程学院合办的面向就业的一个院系。MSIN和MSIS是在CMU本部上两年学。MSIT的两个是第一年在匹兹堡第二年在硅谷。</p></li><li><p>MSIN 选课自由度比较高，大概有八门课的选择自由度，所以可以主攻一个方向比如system或者AI/Machine Learning。这两个领域也是CMU的强项。MSIT-MOB自由度次之。MSIT-IS和MSIS比较侧重网络安全。</p></li><li><p>第二年去硅谷各有利弊。如果要找全职，在硅谷面试会方便很多。但是硅谷校区质量高的课程比较少。在匹兹堡的话选课不会被限制，但是找全职飞来飞去面试还是很累的。</p></li><li><p>以上项目对CS科班出身并不看中，每年都有多名非CS专业的成功申请者，专业包括EE、信息工程、金融、商科、数据科学等。</p></li></ol><h2 id="Master-of-Software-Engineering"><a href="#Master-of-Software-Engineering" class="headerlink" title="Master of Software Engineering"></a>Master of Software Engineering</h2><ol><li><p>该项目是Institute for Software Research系下的master项目，非科研导向，内含大量的课程以及工业界性质的大project的训练，目标是培养学生的就业技能。就业极好，85%以上的中国学生在master后就业都是应聘software engineer职位。申请方面，该项目对大型软件开发以及代码能力非常看重，需要申请者提早有针对性的进行背景提升以及文书包装。该项目对CS科班出身并不看重、对国内学校排名也并不看重，每年都有非985大学的申请者申请到该项目。需注意，该项目申请过程中有代码测试，最好提前做刷题准备。</p></li><li><p>除以上项目之外，CMU的硅谷校区也有一个Master of Software Engineering项目。有意思的是，该项目并非Institute for Software Research系开设，而是ECE系开设。该项目同样是就业导向，除上课之外，有大量项目训练，并且会通过学校本身network创造实习、就业等机会。申请难度比上面项目略低，但就业同样极好。是一个常被中国申请者忽略或者低估的项目。申请方面，同样需要针对性的准备和技巧，对国内学校排名不看重。每年都有非985/211大学的申请者拿到该项目的录取。</p></li></ol><h1 id="UIUC"><a href="#UIUC" class="headerlink" title="UIUC"></a>UIUC</h1><h2 id="MSCS-1"><a href="#MSCS-1" class="headerlink" title="MSCS"></a>MSCS</h2><p>UIUC是一个CS神校，CS系实力非常强。UIUC的Master是纯正的科研型硕士项目，有funding有导师。录取门槛极其高，基本低于5%的录取率。录取标准大致等同于PhD，比UIUC的PhD项目的标准稍低。大部分学生会找到自己的导师并进行科研，2年后为申请PhD做准备。</p><p>该项目的申请截止日期在12月15日，和UIUC CS PhD的申请截止日期一致。</p><h2 id="MCS（Professional-Master-of-Computer-Science）"><a href="#MCS（Professional-Master-of-Computer-Science）" class="headerlink" title="MCS（Professional Master of Computer Science）"></a>MCS（Professional Master of Computer Science）</h2><p>近几年新开的项目。上课等方面和MSCS一样，区别是授课型项目，没有科研和找导师的要求，因此没有funding。从这几年的毕业生反馈而言，就业很好。该项目本身对申请者的科研背景和要求没有MSCS高，同时对国内申请者的学校要求也较为宽松。世毕盟帮助多名学员申请到此项目。但据世毕盟观察，该项目的申请门槛在快速提升。该项目学制3个学期，一般大概是一年半的时间。</p><p>该项目的申请截止日期在1月15日，和MSCS以及PhD的申请截止日期不一样。</p><p>PhD的申请，相比于四大，教授权力很大，基本教授可以决定录取，非committee强势学校。只要教授愿意要，committee基本不会卡英语成绩、本科学校排名、GPA等条件。</p><p>UIUC工程学院的计算机系的研究生项目（含PhD, MSCS，MCS）的申请都不需要GRE成绩。尽管官网对于国际学生的托福成绩有严格要求，即使申请者不够官方要求的分数，也无法阻止Committee的发offer的决心和速度！！！</p><h1 id="Cornell"><a href="#Cornell" class="headerlink" title="Cornell"></a>Cornell</h1><h2 id="CS-Master-of-Engineering-MEng"><a href="#CS-Master-of-Engineering-MEng" class="headerlink" title="CS Master of Engineering (MEng)"></a>CS Master of Engineering (MEng)</h2><ol><li><p>康村坐落于纽约州的一个小镇Ithaca，是一个真真正正的村，环境比较自然。Meng项目时长只有9个月两个semester，可以申请延期一学期毕业。相对其他学校华人比例较少，其中香港和海本居多。</p></li><li><p>CS拥有最高的选课priority，对于选课的自由度很高。</p></li><li><p>雇主的口碑较好，linkedin的求职排名在Software Engineer这块排全美第二，学校本身就是绝对的加分项。</p></li><li><p>申请方面，CS的科研并不是该项目考察的重点。项目经历、海外经历、工业界经历、大公司实习、创业等经历，是该项目更为看重的方面。喜欢有美国本科交换经历的申请者。</p></li></ol><h2 id="Cornell-Tech-CS-Master-of-Engineering-Meng"><a href="#Cornell-Tech-CS-Master-of-Engineering-Meng" class="headerlink" title="Cornell Tech CS Master of Engineering (Meng)"></a>Cornell Tech CS Master of Engineering (Meng)</h2><ol><li><p>极好的一个新项目。在Cornell位于纽约的新校区，Roosevelt Island，完美填补了Cornell本校区地理位置带来的找工作方面的限制和不便。</p></li><li><p>招生看重的方面和Cornell Ithaca本校区的MEng类似，但招生规模稍大，难度相近。目前的招生规模大概是70人，其中中国人大概30人左右，就业情况极好极好！</p></li><li><p>Cornell Tech CS项目含有名校情结（申请者的本科院校），被录取者一般都为中国大陆10的名校，如南京大学等；或者EECS领域的传统名校，如北邮等；</p></li><li><p>项目重面试，面试官由校友面试官（可能是教职工，含教授，或者该项目校友，甚至是在读的学生）充当，面试问的问题比较随机，没有题库；</p></li><li><p>根据目前雇主们的评价，以及在读学生找工作的情况看，Cornell Tech比Cornell本校区声誉更好一些；</p></li><li><p>尽管Cornell Tech的项目和Cornell本部项目，可以建立不同的账号申请不同的项目，但是最终只允许你提交一个申请，所以小伙伴在提交申请时需要选择是申请Cornell Meng in CS还是Cornell Tech Meng in CS！</p></li><li><p>Cornell Tech除了有CS Meng外，还有Master in Electrical and Computer Engineering（ECE）, Master in Operations Research and Information Engineering（ORIE）, Technion-Cornell Dual Master’s Degrees in Connective Media（CM，偏HCI）等项目。</p></li></ol><h1 id="UW"><a href="#UW" class="headerlink" title="UW"></a>UW</h1><ol><li><p>不接受外校申请者的MS申请；尽管UW计算机系也开设了PMP项目，但是对于申请者的全职工作经历有2年以上的硬性要求。</p></li><li><p>PhD的申请门槛逐年上升，甚至有逼近CS四大神校的趋势。PhD的申请由committee和教授共同决定，committee的权力略小于MIT、Stanford和Berkeley，但远强于UMich和UIUC。Committee会对GPA和英语成绩等有基本要求。</p></li></ol><p>历史上曾有多名申请者，因为UW的CS博士的就读机会，而放弃MIT, Princeton，CMU等offers</p><h1 id="Gatech"><a href="#Gatech" class="headerlink" title="Gatech"></a>Gatech</h1><h2 id="Master-of-CS"><a href="#Master-of-CS" class="headerlink" title="Master of CS"></a>Master of CS</h2><ol><li><p>为期1年，需修读30个学分，强烈建议申请者拥有C语言背景。项目偏就业，基本无奖学金。Gatech是CS大牛校，工科大牛校。近年CS的排名提升较快。地理位置不占优势，但也是大城市，非农村。</p></li><li><p>申请方面，偏重均衡，无特别看重（如paper等），但对英语成绩有严格的要求，GRE和TOEFL的要求见其项目主页。对中国大陆地区学生并非特别友好，录取比例里面大陆的申请者的比例相对于一些其他项目（比如CMU、UMich、UIUC等）偏低。</p></li><li><p>PhD的申请，教授权力很大，基本教授可以决定录取，非committee强势学校。</p></li></ol><h1 id="Princeton"><a href="#Princeton" class="headerlink" title="Princeton"></a>Princeton</h1><p>总体来说，是一个非常高冷的项目，招的人数较少，偏重有研究背景的学生，在大陆地区招生很少，如果没有一定的connection，不建议随意申请。</p><p>具体来说：</p><ol><li><p>master项目，两年，统一录入，第一年结束时可以选择thesis-track和MEng-track。学术课程为主、无特别的针对工业界的培养。往年的master项目录取看重research，极难申请。master项目今年有可能会扩招，但消息尚待证实。</p></li><li><p>PhD项目高冷、偏重理论、需要有教授的connection，招生人数较少，难度大。过去的3年中，某机构至少收获9人次的Princeton CS PhD offer，但是绝大多数被录取者都选择了其他项目就读……</p></li></ol><h1 id="UT-Austin"><a href="#UT-Austin" class="headerlink" title="UT - Austin"></a>UT - Austin</h1><h2 id="Master-of-Science"><a href="#Master-of-Science" class="headerlink" title="Master of Science"></a>Master of Science</h2><ol><li><p>德州扛把子，CS传统强校，学校AI方面特别强。学费便宜，城市宜居，英语成绩过关的话，做TA、RA甚至不要学费倒贴钱给你。就业率非常高，有部分继续读PhD。出路非常好的master项目。</p></li><li><p>项目申请难度较高，官网统计录取的学生平均GPA在3.85，录取率大概在5%。其录取的背景很多样化，不过根据统计数据，还是比较重科研的项目，大体喜好CS科班出身的申请者，对除EE外转专业申请者不友好。最好有一定的海外科研经历和publication。</p></li><li><p>PhD申请教授的权力比较大，但committee并非完全弱势，总体来说是一个比较均衡的录取机制，但和教授的套磁等是有必要的。</p></li></ol><h1 id="Caltech"><a href="#Caltech" class="headerlink" title="Caltech"></a>Caltech</h1><p>比Princeton更加高冷的项目，招的人数极少，偏重有研究背景的学生，但并非只要publication好就能上。无论MS还是PhD录取标准非常迷。如果没有一定的connection，不建议随意申请，否则和抽彩票无异。</p><h1 id="Umich"><a href="#Umich" class="headerlink" title="Umich"></a>Umich</h1><p>老牌公立常青藤，实验室比较好进、找老板也比较容易，想拿MS当跳板转PhD的话不错。找工作总体来说不错，Umich在业界的名声和connection极好。</p><p>总的来说，是非常“实在”和“良心”的项目，体现在以下几个方面：</p><ol><li><p>有两个master项目，一个computer science and engineering (CSE)，另外一个是electrical and computer engineering (ECE)。两个项目之间有很大的选课自由，并且两个项目的area是有很多交叉的地方，比如ECE项目下有computer vision等偏CS的track。</p></li><li><p>非常适合EE背景转CS的一个项目。EE背景的同学可以通过申请ECE项目就能转CS。</p></li><li><p>录取方面，非常喜欢国内清北复交科浙等学校的理工科背景申请者，对中国学生比较友好，<strong>每年中国学生录取比例较高，这和该校EECS系华人faculty较多、势力较大也很有关系。</strong></p></li><li><p>PhD的申请，教授权力很大，基本教授可以决定录取，非committee强势学校。</p></li></ol><h1 id="UCLA"><a href="#UCLA" class="headerlink" title="UCLA"></a>UCLA</h1><h2 id="Master-of-Science-1"><a href="#Master-of-Science-1" class="headerlink" title="Master of Science"></a>Master of Science</h2><ol><li><p>两年时间，进可PhD，退可找工作，因为地理位置优势，录取的国内学生水平十分之高。</p></li><li><p>在加州，众人印象中的加州系统老二，名声大。感觉去UCLA这个项目的很多同学都想继续读博，而且这个学校开的课程也是比较偏理论，不是特别偏重工程实践。</p></li><li><p>录取方面，以科研为主，和PhD的录取标准比较一致，一般要求有publication和海外推荐信。对在UCLA本校做过的科研的申请者有一定的优势。</p></li><li><p>PhD方面，教授权力比较大，但committee会卡一些基本的GPA和英语成绩，如果不满足英语成绩，教授一般无法绕过committee录取。</p></li></ol><h1 id="Columbia"><a href="#Columbia" class="headerlink" title="Columbia"></a>Columbia</h1><h2 id="MSCS-2"><a href="#MSCS-2" class="headerlink" title="MSCS"></a>MSCS</h2><p>哥大的CS系成立于1979年，研究的领域涵盖了CS领域的各个研究方向，包括计算生物学、计算机工程、算法和用户界面、机器学习、网络、自然语言处理和语言、安全与隐私、软件系统、计算机理论、视觉与机器人等等。其中，实力较强的专业方向包括机器学习、安全与隐私、软件系统以及计算机理论。哥大的CS项目申请截止时间比较晚，本质上属于Rolling机制，也就是说早申请是可以早拿到offer的，并不是最后等到申请截止日期统一被审阅材料和决定录取。</p><p>项目本身的地理位置、项目质量、就业情况都非常不错。对中国申请者也比较友好，总的来说，是一个绝对不容错过的申请学校。</p><p>PhD方面，教授的权力很大，看重publication和connection，需要套磁以及和教授联系。</p><h1 id="WISC"><a href="#WISC" class="headerlink" title="WISC"></a>WISC</h1><p>我他么连这学校的名字都读不称头…（称头是四川话里面清楚的意思）</p><p>貌似叫做：<a href="https://zh.wikipedia.org/wiki/%E5%A8%81%E6%96%AF%E5%BA%B7%E6%98%9F%E5%A4%A7%E5%AD%A6%E9%BA%A6%E8%BF%AA%E9%80%8A%E5%88%86%E6%A0%A1">威斯康星大学麦迪逊分校</a></p><p>CS系比较大，隶属于College of Letters &amp; Science, 不是College of Engineering，毕业生去业界工作的比较多，但就业受一定地理位置的限制，就业出路并不如同排名的Columbia等学校好。MS项目申请难度不小，总体来说和UT Austin的项目类似，看重科研的同时，对GPA和英语也有较高的要求。对中国申请者没有特别友好，项目中中国人比例不如一些其他项目的高。喜好有海外交换和科研经历的申请者，看重美国教授的推荐信，最好有publication。</p><h1 id="Harvard"><a href="#Harvard" class="headerlink" title="Harvard"></a>Harvard</h1><p>Harvard的CS专业小而精，不是传统的CS强校，是这几年冉冉升起的新贵，最近几年的排名逐年上升。</p><ol><li><p>Harvard基本没有真正的CS MS项目。两个相关的项目，都是由Institute for Applied Computational Science开设，一个是Computational Science and Engineering（CSE），另外一个是Data Science。其中CSE有SM和MEng两个项目，而Data Science只有MS一个项目。</p></li><li><p>总的来说，Harvard的录取综合考虑很多因素，需要各个方面都非常均衡的顶尖，包括学校出身、GPA/排名、research、推荐信。对清北复交浙以及美本学生友好。</p></li><li><p>特别需要指出的是，Harvard的这两个项目很适合理科背景，尤其是physics和math，转CS。这两个项目注重computational和data，不偏好纯software engineering出身的，很多时候CS科班出身并不占绝对优势。录取的学生背景非常多元化，某机构历史上被录取的学员，有CS背景的，有商科背景的，甚至还有社会科学（社会学）背景的。</p></li></ol><p>PhD项目：Harvard有正统的CS PhD项目，CS PhD项目招生比较少，教授权力大，需要有教授的connection申请才比较有希望。如果没有的话，套磁是十分必要的。</p><h1 id="UCSD"><a href="#UCSD" class="headerlink" title="UCSD"></a>UCSD</h1><h2 id="MSCS-3"><a href="#MSCS-3" class="headerlink" title="MSCS"></a>MSCS</h2><ol><li>SD的master项目的培养质量近年有超过UCLA的趋势（主要是SD重视master项目……）。每年超出4000+个申请者（去年是4400，每年增幅700左右，今年估计已经到5000人），录取率大概10%。Master项目分为CS75(computer science)和CS76(computer engineering),计算机专业多数申请的MSCS是CS75。项目是quarter制，项目比较灵活，分为15个月或者18个月或者21个月，且提供三种修习方式：</li><li>Thesis 需修满40个学分，需要参加一个科研项目，写毕业论文，答辩通过后毕业，适合以后申PhD</li><li>Standard Option 需修满40个学分，需满足课程宽度和深度双重要求，宽度上课程涵盖Theory, Systems和Applications</li><li>Interdisciplinary Option 该交叉修读方式需要修48个学分，除了Standard Option的要求外，需要选择一个交叉方向作为Secondary Option</li></ol><p>MSCS在学校的学生，如果有导师愿意接受为PhD的话，可以在第二年直接transfer为PhD，不用再走常规申请的流程，并且可以用硕士课程waive前两年PhD课程，省下不少时间，非常赞。</p><ol><li>SD的MSCS项目总的来说比较偏重申请者research方面的背景，有publication是非常加分的。对中国申请者总体友好，特别钟爱清北、上交、浙大的学生。</li></ol><p>PhD: UCSD的CS PhD项目教授权力非常大，connection加分、套磁必要。</p><h1 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h1><p>又是一所我名字都读不出来的学校</p><p><a href="https://en.wikipedia.org/wiki/University_of_Maryland,_College_Park">马里兰大学学院市分校 (University of Maryland)</a></p><p>MSCS和PhD</p><ol><li><p>每年申请人数两千多。这个CS系的graduate项目以研究为主, 和别的学校不同，该校的MS和PhD的录取是由同一个committee以同一套标准决定的。但由于招收的MS的申请者数量相对较少且申请人背景普遍弱一些，致使master的录取率小于10%，低于PhD的录取率。但是该校的CS系现在很有钱（不少申请者放弃Berkeley, CMU等offer，而选择UMD Master），目前在扩张，未来几年要招更多的faculty，会适当增加master项目的招生数量。</p></li><li><p>这边的研究机会很多，MS如果愿意做research，也基本都可以找到导师，这个系的graduate program是研究向的，愿不愿意找导师取决于学生自己。</p></li><li><p>学校每年春秋各举办一次career fair，秋天的规模较大。有很多公司过来，包括FLAG这样的大公司。</p></li></ol><h1 id="Upenn"><a href="#Upenn" class="headerlink" title="Upenn"></a>Upenn</h1><p>宾大的计算机系叫做Computer and Information Science(CIS)，提供的以下硕士项目：Master of Science in Engineering (MSE)in Computer and Information Science (CIS)，Master ofScience in Engineering (MSE) in Computer Graphics and Game Technology (CGGT)，Master of Science in Engineering (MSE) in Robotics (ROBO)和Master of Computer and Information Technology (MCIT)等项目。</p><p>宾大的申请有两轮，第一轮截止日期是当年的11月15日，第二轮截止日期是次年的3月15日。其中MCIT接受各种转专业申请。</p><p>总的来说，宾大的申请看重申请者的综合条件，并不过分强调publication等，也不强调学校的出身，但很在乎ranking。对各个学校ranking靠前的女生特别友好，看重diversity。另外一个特别有意思的是，他们的MCIT针对的是和CS差别很大的专业的转专业申请，比如像EE、信息工程等都不合适，商科、文科非常合适。因为以上的原因，针对宾大申请的文书和背景包装很有技巧。每年都有很多申请者申请到宾大的CS项目，其中一些申请者来自非985和211的本科学校。</p>]]></content>
      
      
      <categories>
          
          <category> 出国申请 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI PhD Application and MSCS Application Tutorial</title>
      <link href="/2022/07/12/blog1/"/>
      <url>/2022/07/12/blog1/</url>
      
        <content type="html"><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>树洞上的深度好文，目测应该来自某个 7 字班茶园的学长吧，贴在博客上</p><p>前半部分是 AI 方向 的 PhD 申请，后半部分是整个 MSCS 的申请</p><h1 id="AI-PhD-正文"><a href="#AI-PhD-正文" class="headerlink" title="AI PhD 正文"></a>AI PhD 正文</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>长文慎入】开个洞来详细的讲讲美国AI方向PhD的申请。</p><p>本来我早就想写这么一个来造福有意向出国读研的学弟学妹，但是要么我太忙没时间，要么有时间但因为喜欢冲塔被树洞小管家禁言。正巧前两天看见那个答疑洞吸引了很多关注，而且我最近就差nips写作了，正好借此机会练习一下文笔写点东西。请注意，本文由于追求完备，力争覆盖申请的每一个细节，所以可能会很长，毕竟我想写这个的目的就是看不惯中介靠信息差卖高价，我就是来砸他们的饭碗的，所以自然要事无巨细地全写出来。这样即便大家要报世毕盟，也只需要报半价的那个套餐就好了。不过我其实有很多地方十分主观，比如涉及评价学校的部分，所以不认同的人可能觉得我在夹带私货。如果你不认同本人的部分观点，就请当做我的一家之言，仅做参考就完了。</p><p>当然，这个洞是专门给AI方向的PhD申请开的，主要针对的群体是ai/ml/cv/nlp/dm/robotics方向的申请者。cs其他方向比如system也可以参考，甚至不是cs的申请者读完可能也会觉得有所收获，所以各位敬请各取所需。我在最后也会讲讲关于mscs的申请。</p><h2 id="去美帝的原因"><a href="#去美帝的原因" class="headerlink" title="去美帝的原因"></a>去美帝的原因</h2><p>所以为什么要去美国读AI的PhD呢？这似乎在当下有点政治不正确，显得清华好像留美预备学校一样。按理说，看csranking上清华北大反超cmu登顶世界第一不过是时间问题，为什么要跑到“注定失败”的美国去再上演一出49年入国军呢？很多人有从各个面向给出了很多不同的解答。我只根据纯粹的research原因给大家一个我的想法。其实，清华cs和北美top校最大的差距就是工作偏follow-up。不服气的小伙伴可以先想一想，ai顶会国内没少产出，但dl时代真正有high impact的可能只有当年kaiming he在msra的那一系列工作，而kaiming现在也已经在FAIR了。换言之，国外的顶级cs phd program更喜欢学生能够去开坑，而清华的phd更倾向去填坑。 什么样的工作算开坑呢？一个类型是定义新的问题，比如fei-fei组的工作。很多人诟病飞飞标了个数据集，或者搞了个新的benchmark就不管了，但在她看来刷benchmark是工业界的事，学术界本来就应该告诉大家我们应该往哪里move on，无论是定义新问题，还是标新的数据集，都是在告诉大家整个community下一步的前进方向。而不单纯是今天我有一个task，有一个benchmark，还有一个SOTA的模型，我在上面加加减减然后提几个点，讲一个故事就是一篇论文。值得关心的不是在ImageNet上有提了几个点，而是我们究竟离AI还有多远这样一个big picture。所以很多做object detection或者segmentation的同学不妨想想，为什么要从bounding box和pixel-wise两个角度来做understanding。另一类开坑的工作，是创造性的提出一套前所未有的解决问题的范式。很多人用lstm做nlp的时候，google第一个说attention is all u need,cv都是cnn的时候也是google告诉大家transformer可以代替cnn。很多人现在做点云，但是第一个提出可以直接用deep model on point cloud的是guibas组。类似的还有首先用deep model结合SDF表达3D物体的DeepSDF（UW+FB），以及去年大火的nerf（Berkeley+google)第一个把deep model引进到rendering中取得了很好的结果。总之，说穿了就两个问题，我可以怎么创造新的问题来继续提升deep learning？deep learning可以用来提升哪些现有的问题？很多时候回答这两个问题需要的是对于潮流发展有敏锐的sense，我认为这才是中美AI学界差距最大的地方。song han能拿到mit的教职是因为在stanford开了model compression的大坑，jun-yan zhu和tianqi chen拿到cmu的offer也是因为分别在Berkeley和UW开了image2image以及tvm的大坑。我觉得清华要摆脱留美预备学校的帽子，需要先清华能让美国人做我们定义的问题。</p><h2 id="GPA"><a href="#GPA" class="headerlink" title="GPA"></a>GPA</h2><p>好像扯得有点远，不过我觉得先让大家厘清为何要去美国读AI PhD是一件很重要的事情。下面我把申请中的各要素分门别类地和大家详细讲一讲。</p><p>我首先就要讲gpa。很多人说gpa对phd不重要，也有很多人说gpa重要，到底重不重要呢？Itdepends。如果你本科毕业发了10篇顶会一作，gpa可有可无，如果没有paper，gpa可能就是你的救命稻草。申请的结果是各个方面加权的结果，但不同人的加权系数是不一样的。与高考关注有没有短板不同，美国学校更关注的是你的长板，一般来说你出彩的那一部分越出彩作用越大，加权越高。所以3.95gpa很可能让缺少过硬科研经历的你进入Princeton这种分控学校。但很多gpa没这么高的同学也不必过于担心，你也可以通过多发paper来弥补。虽然gpa永远越高越好，但gpa过了3.7以后边际效益就很低了，3.7和3.8的差距远远小于一篇一作paper的差距。从来没有什么不到3.8上不了topphd的说法，唯一的硬线只有3.0，到不了3.0是真的会第一轮被刷的。所以啊，如果你都大三了，别天天计较怎么能让gpa的百分位高一点这种事了，赶快去加入实验室做科研吧。如果你刚大一的话，赶快让自己的gpa高一点，这样你其他方面的压力会小不少。</p><h2 id="TG"><a href="#TG" class="headerlink" title="TG"></a>TG</h2><p>很多人为了英语考试没完没了给ets或者新东方送钱，真的是没必要。其实cs研究生的申请根本没必要什么托福110，许多学校的线一般是100，有些学校或项目会明确写出来要求托福100以上，如果想保险一点可以考到105以上，再往上也没啥用了。至于单项唯一要紧的是口语，至少要上20，像cornell这种藤校，明确写了会卡22的线。一般低于22的话，你的交流水平会被质疑，教授肯定要通过面试确认一下你是不是不会说英文。但不会因为22就不录取你，而是要你入学后去上英语课，毕竟读phd要做TA。至于GRE，这东西320+3.5以上绝对够了，现在无论phd还是ms都越来越淡化GRE的重要性了，毕竟背一堆生僻词汇以后也用不上。</p><h2 id="publication"><a href="#publication" class="headerlink" title="publication"></a>publication</h2><p>研究经历&amp;Publication： 重中之重。AI方向没有一作paper基本与top<br>phd绝缘，即便3.95的gpa最好很可能也就是Pton了。可能偏理论的机器学习方向还好一些，但应用方向比如cv/nlp没有paper基本四大第一轮就被筛掉了。所以建议有志于top phd的赶快搞paper，但是tier2的学校很多没有paper也是有可能的，这就要看你的推荐信（主要是暑研导师的评价）以及gpa了。但paper与paper是不同的，一般paper看的是几作、什么会议以及是否已经中稿。基本来说，一作顶会是能逆天改命的，本科毕业生一篇中了的一作顶会基本能把你送进前15的学校。二作对本科来说也有点用，三作及以后作用寥寥，但在简历上写上去总比什么也没有好看，所以即便蹭三作也请大家蹭一蹭。至于会议类别，基本北美top phd只看顶会，cv就是cvpr/iccv/eccv，国内喜欢投什么aaai/mm，这对于top phd作用比较小，但tier2的学校会看，申请ms也是大有裨益，基本一篇aaai一作能报送进入cmu类似miis或者mscv这类项目，所以看大家的目标院校，如果不是非四大不读，可能差一点的会议也可以投投。至于我上面说北美学校比较喜欢开坑的工作，会不会对文章质量也有要求呢？其实这是对phd毕业生的期待，junior researcher的paper基本只能证明你走了一整套流程，教授看的也是这个，因为可以不用从头培养。所以啊，即便灌水顶会，也请多灌一点，你大四申请的时候中了三篇icml/nips/iclr一作，要是没有四大offer，我可以跟你姓。顶会水文的确多，但也不是是个人拍拍脑瓜就能中的。当然如果能像zhuang liu那样发一篇best paper就能横扫了，但这不是必要条件。至于文章本身，topic也比较重要，建议大家看看自己感兴趣的老师在做啥，然后follow他们的工作，会大大提高被录取的概率。但并不是说你不能申请其他方向的老师，因为你本科做得可能和你phd做得完全不同，老师看的是潜力，所以申请的时候不要因为和自己方向不match就不申请了，只要你觉得你愿意做，你就大胆去申请就是了，反正申请就是轮盘赌，一看风水二看命，然后才看你的背景条件。paper另一个重要的点是中没中。不管是不是水文侥幸中的，只要中了就是大大有用。当然很多人暑研的工作大概率申请的时候没结果，但也要在cv和ps里列出来，然后标上in submission，虽然不如accept，但也是有用的！然后建议在投的要么挂arxiv，要么加一个google drive的link，然后要在教授的letter中体现出来。至于in progress的列了也没用，因为没完成的paper等于没有。</p><h2 id="暑研"><a href="#暑研" class="headerlink" title="暑研"></a>暑研</h2><p>对于申请phd来说，北美推荐信很重要，当然ms也一样。唯一的拿到北美letter的机会就是暑研。所以无论申请ms或者phd的，都请暑假去美国实验室搬砖吧，即便你对科研没兴趣。而要申请phd的人，去academia要比industry强，即便你的offer来自google brain。至于暑研选校的问题，我诚挚地建议不要无脑四大，虽然我觉得我说了很多人也不会听。道理很简单，暑研的目的是拿推荐信，暑研不会给你发文凭，即便ugvr这种官方项目也不会给你发斯坦福的文凭。你要确保的是哪里能拿强推。众所周知，四大ai的phd return极度难拿，一年去了好几个可能就一个能拿return，如果你没gpa很高，或者已经有一作顶会了，我建议不要去陪太子读书当分母了。要不到时候你那些去了top10的同学纷纷把坑位占了，你回头才发现top10都没你位子了。不过如果你海专精算后发现自己是四大的有力竞争者，建议直接去四大暑研，因为本校的推荐信总是更好用。很多人可能怀疑letter质量是否会和学校专排挂钩，我可以这么讲，这个相关性有，但比你做的怎么样要低得多。你去ucsd拿top1%的强推照样可以把你送进四大。当然如果目标就是ms，请直接去目标学校，因为ms的坑位多很多，不会有别人占了你的概率就急剧降低这种事。所以啊，准确定位自己是申请暑研前应该做的第一件事！也是申请成功的先决条件。确定了自己的水平然后就是确定去哪个老师。建议参考各校官网率、csranking以及过往学长去向，然后广撒网。可能发十封有一封回复的，这其实很正常。一般老师如果愿意会约你面试，这基本大半只脚就迈进去了。因为暑研门槛不高，所以不要紧张！和老师随便聊聊你过去的一些科研经历或者参与的srt，可以很naive，但老师只是想看看你有没有入门而已。至于办理签证买机票我就不赘述了。</p><p>然后我要讲讲怎么做一个成功的暑研。基本有两点，第一个有产出，第二个给老师留下印象。有产出自然是有paper了，对于老师写推荐信来说，paper提交了中没中其实差距不大，但有没有交这评价注定是两个档次，特别是ai领域。然后留下印象这事可能比较tricky，我的建议是多交流，多开口！！老师认知学生最主要方式就是交流，一个是paper reading，另一个是关于project的personal meeting。纵然你满腹经纶，但如果你徐庶进曹营，一言不发，你这个letter也不会很强，因为老师没东西写。可能有人觉得我没啥可说的啊，项目进度很快就说完了。这就需要你展现吹nb的天赋了，你大可以和教授讨论各种high-level的东西，美国人喜欢学生对high-level的东西有思考，而不是只关注技术细节。至于high-level是什么东东？请看各文章的intro部分。交流的质量只要从你的表达能力以及思维是不是清楚来判定。如果你觉得自己英语不好，或者专业术语不太熟悉，建议找华人教授，这样可以中文交流，甚至可以微信交流。总之多交流就对了！当然你也不能做一个光说不做的人，你要干活，要可靠，如果你答应了要做一个实验，下一次请展示出结果，而不是说我忘了，否则大大扣分！然后要关注细节，无论是和导师的日常交流还是面试，很多时候对细节的追问会体现你到底懂不懂自己的project。最后的最后，要主动！！如果老师不找你，你就找他；如果你对project有什么想法，你就大大方方地说出来，哪怕你想做一个不同的也无所谓。展现出你的热情以及对于新知的渴望来！哪怕一个task从没接触过也不要怕，你要展现出你在清华锻炼的自学能力以及学习热情来，因为fast adaptation是很重要的能力。暑假结束后，也不要不理老师了。要继续保持联络，直到project得到论文产出，善始还要善终。</p><h2 id="推荐信"><a href="#推荐信" class="headerlink" title="推荐信"></a>推荐信</h2><p>推荐信：最重要的没有之一！！！！好的推荐信能让你逆天改命，坏的则能让你前功尽弃。所以怎么做才能得到好的letter，我已经在上一段讲了。我这一段说说怎么判定是不是positive的letter，该向谁要letter，以及如果自己写letter该怎么弄。有些限制推荐信数量的，我觉得都是坑。填推荐信其实特别快。我问过我所有老板，他们都说没数量限制。而且负责人的老板在你申请前，比如11月底，会主动抽时间和你商量一下你的申请，该怎么选校，该怎么写文书，一般老板越关心你的申请，越愿意和你聊你的申请，你拿到强推的可能性越高。至于该管谁要，尽量找你的科研老板，上课教师基本没啥用，即便是交换期间的美国授课老师也是不如国内老板的。美国有个词形容这一类推荐信，叫做DWIC，也就是do well in class，毫无信息量，因为上课的人太多了，即便你做了十分好的project，也没用。ms也一样。所以尽量找你的academic advisor，因为他们和你接触的最多。要知道，推荐信的强度和推荐人对你的熟悉程度直接挂钩，你认识越长这信说服力越强。但是很多时候国内老师不知道怎么写美国学校的lor，所以这就牵扯另一个问题，我们自己怎么写。首先是信的内容，主要就是要有具体的例子，不要泛泛，要从这几个例子得出被推荐人的品质，比如highly motivated，quick learner，clarity of thought, independent, hard-working, own initiative and self-driven，反正推荐信看的就是成为good researcher的潜力，一定要把相关的特质反映出来，但是不要凭空突然冒出一个形容词来，那样会很生硬。然后老美很夸张的，就不要太谦虚，就直接说recommende with no reservation。如果你觉得自己nb的很，大可以加上“这是我xxx年来见过的最nb的本科生，你不录取他我会和拼命的！”。除了信的本体，还要填一个调查问卷，渴望了解的quality列的很清楚。有些人不了解情况，觉得20%就不错，简直大错特错，那简直快和黑推差不多了。如果综合评价没有全在5%，也就是outstanding，基本上top phd就和你say goodbye了。哪怕是申请ms，也请厚着脸皮给自己勾选top 10%及以前的选项。有志于top phd的同学，请直接选前两项， top 5% or top 1%。</p><p>哦对了，补充一点，建议尽量去美国暑研拿美国推荐信。因为美国人很自大，即便是欧洲的推荐信很多分量也不重，他只看美国的letter，但欧洲、新加坡、香港的学校是认美国推荐信的。</p><h2 id="CV"><a href="#CV" class="headerlink" title="CV"></a>CV</h2><p>CV：cv很重要，因为是最直观了解你的窗口。即便没有上传cv的窗口，也请在补充材料里面上传。cv不要太长，就2页。第一部分是教育背景，gpa啥的，如果排名好看就把排名加上去。第二部分是publication list，即便in submission的也加进去，当然你需要在letter里面有所呼应。然后把自己的名字标黑，按照作者顺序依次排列。后面可以加一个paper网页的超链接。不要没有paper，自己瞎编，这是诚信问题，后果十分严重。第三部分是你的project部分，著作等身的同学可以不写，但没paper的还是写一下吧。然后接下来的section你可以列一下你得到的各种award或者scholarship。最后一个section，写一下你掌握的技能，比如计算机涉及的各种tools，例如pytorch，还有你的语言能力，比如托福、GRE分数。</p><h2 id="文书"><a href="#文书" class="headerlink" title="文书"></a>文书</h2><p>个人陈述其实没那么重要，至少肯定不如cv重要，虽然很多人鼓吹说我依靠与众不同的文书逆袭了。但洗洗睡吧，这事儿落不到你头上，你还是老老实实写一篇正常的八股ps比较靠谱。开头不要说什么自己小时候怎么样怎么样，搞得和二十四史帝王传记开篇一样天有异象。你是申请phd，不是申请当皇帝。没人care你小时候如何如何天纵奇才，或者是怎么开始搞计算机的。你就直接说，我对计算机感兴趣，对ai感兴趣，因为ai可以改变世界，改变人类，blablabla。然后你就需要把你列在cv里的代表性项目，用一个high-<br>level的topic串联起来，来表达你曾经探索过什么方向。举个例子，比如我现在既做过few-shot，又搞过efficient ml，我就可以说我长期以来都对于如何在resource constraint的情况下提升deep learning model感兴趣。然后分别叙述这两个project。叙述project请简短叙述project是什么方向，然后highlight你做了啥，然后解释给了你哪些high-level的思考。陈述完个人过往经历之后，还要展望未来，说说你未来想干什么，这个部分可以针对不同学校定制，往该校相关方向关心的问题上面去靠。然后要写一段你愿意和学校的谁合作什么项目，一般一所学校列三个老师，不要太多，要不大家会觉得你海王。也不要太少，要不正好这老师不招生你就惨了。最后加一段结尾表达对该校衷心的热爱与对录取的期待。不要让ps超过两页。</p><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><p>我大致谈谈AI的几大方向以及顶会，我把他分成了六大方向。<br>传统AI：现在做的人很少了，一般包括search、planning，其实bayes那些我觉得也可以算进来。顶会自然是aaai、ijcai，虽然这俩在cv领域不咋样。此外UAI也不错。</p><h3 id="CV-1"><a href="#CV-1" class="headerlink" title="CV"></a>CV</h3><p>计算机视觉（cv)：顶会自然是cvpr、iccv、eccv。很多人说cv不行了，但是国外申请的人还是多的一笔。有一些小会议，比如WACV、BMVC或者3dv，感觉3dv其实还不错，就是topic比较窄，只局限在3d vision。BMVC因为牛津的人力捧，所以感觉比wacv强一点。</p><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><p>自然语言处理（nlp）：可能比cv申请更卷的方向，因为美本喜欢做，而且因为short、finding这些，paper数量大家都很多。请见acl、emnlp、naacl，而且一般以长文为主。short要弱一些，finding就更弱了。至于其他的像coling这种会其实都差一档。</p><h3 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h3><p>机器学习（ml）：因为理论，所以自动筛掉了很多竞争者。也因为这样，相比其他方向，ICML/NIPS/ICLR的论文数量是最能体现四大优势的。其他几项csranking就是个笑话。当然AISTATS和COLT也很好，但更理论。其实AAAI的ml paper比cv paper质量高一些。</p><h3 id="DM"><a href="#DM" class="headerlink" title="DM"></a>DM</h3><p>数据挖掘（DM）：这个领域基本是走日薄西山了，KDD已经不比10年前了，sigir更衰，我觉得已经混到cikm、icdm差不多的水平了。www会议还不错。而且这个领域的老师很多也在和nlp或者hci交叉，会投很多CHI或者acl这种会议。</p><h3 id="Robotics"><a href="#Robotics" class="headerlink" title="Robotics"></a>Robotics</h3><p>机器人（Robotics）：Robotics感觉相当杂，基本cs、ee、me的人都在做，而且侧重点从偏perception到偏control的，这中间的差异可谓相当之大。一般传统上的三大顶会是ICRA/IROS/RSS，其中rss最好，iros相对最容易。近年还有做robot learning的人搞得CORL，北美反正是认这个会，可能国内因为ccf还没啥人投吧。</p><h2 id="选校"><a href="#选校" class="headerlink" title="选校"></a>选校</h2><p>然后我要开始得罪人了，开始点评各个学校的AI综合实力。当然大家选校基本是靠排名，常见的排名包括USNEWS的cs专排以及csranking网站排名。前者是peer review的结果，比较靠谱，但有滞后性。后者是辣鸡，不要相信那个排名，大家看看老师有谁就好了，而且名单还不一定齐全。不过排名很多时候差个两三名但实力其实差不多，所以我把他们分了个档来排，同档的有些微差距但并不十分大。</p><p>以下这个排名只反映AI综合实力，一不代表cs总体实力或者其他方向的实力，典型就是UIUC、UMich，他们system很好，但AI就一般。二不代表分项的实力，例如nlp和dm领域的排名就与之有很大出入。</p><p>至于大家选校，还可以看看faculty跳槽的去向，毕竟faculty判断谁靠谱那是真的靠谱。</p><h3 id="Tier-1"><a href="#Tier-1" class="headerlink" title="Tier 1"></a>Tier 1</h3><p>四大yyds。不过CMU方差比较大，里面是真有些比较菜的老师的存在的。相对来说，斯坦福的cs基本坑货比较少，而且各个方向都十分强。MIT和Berkeley没有做data mining的，nlp的也很少，但Berkeley的cv和mit的robotics都逆天强。四大的共同特点就是ml都巨强，是直接拉出第五一档的强，而且人也特别多。</p><h3 id="Tier1-5"><a href="#Tier1-5" class="headerlink" title="Tier1.5:"></a>Tier1.5:</h3><h4 id="UW-amp-Cornell："><a href="#UW-amp-Cornell：" class="headerlink" title="UW&amp;Cornell："></a>UW&amp;Cornell：</h4><p>两所基本在AI所有方向都很强的学校，但是加总起来从规模到质量都比四大稍差一点点的学校。UW主要是得益于西雅图的地理位置，msft和amazon钱给的多，而且像fb和google这些硅谷公司已经把西雅图变成了最大的分部，近十年来不知道从CMU挖了多少学术新星；cornell虽然在偏僻的伊萨卡，但是他在同处纽约州的纽约市建了康泰克校区，尽管坐公交要5个多小时吧。罗斯福岛地理位置很好，紧挨着google的office。虽然校园很小，但环境真的美如画。基本上，在工业界学术界联手搞事情的今天，地理位置的作用还是很大的。</p><h4 id="Princeton："><a href="#Princeton：" class="headerlink" title="Princeton："></a>Princeton：</h4><p>普林整体实力其实不如上面两所，主要是因为规模太小。不过要是你碰巧是普林的强势方向，也就是偏重理论的方向，特别是ml，普林真的是很好的选择，但越应用就相对越差一些。不过普林这种基本一个方向坑位很少，可选的老师很少，录取的人也很少，很可能你找不到你感兴趣的方向。</p><h4 id="Caltech："><a href="#Caltech：" class="headerlink" title="Caltech："></a>Caltech：</h4><p>更极端的例子，普林是你可能找不到对应的老师，caltech是除了极个别方向，比如rl啥的，你都找不到对应的导师。不过一旦有，还都是很好的！而且地处帕萨迪那，周围就是全美最好的中餐。</p><p>tier1和tier1.5的学校基本都不是rolling- based，就发一轮offer，然后没有拿到的发reject，因为他们有足够的信心会有达到预期数量的学生会take offer。当然一般也没有wl，因为他们第一轮发的数量就多于预期录取的数量了。mit是个例外，可能会有一些wl，但很难转正，因为锯掉mit的太少了。</p><h3 id="Tier2："><a href="#Tier2：" class="headerlink" title="Tier2："></a>Tier2：</h3><h4 id="UIUC："><a href="#UIUC：" class="headerlink" title="UIUC："></a>UIUC：</h4><p>我把UIUC放这里真不是故意黑他。可能有人说uiuc不是有韩家伟这种超级华人ip，但很遗憾，dm community的影响力已经日薄西山了，而其他领域uiuc也不错但我觉得基本就是tier2的水平。我认为主要还是地理位置的原因。uiuc很多funding来时军方，像他们的nlp方向的paper的tease都r经常是战场背景……</p><h4 id="UT-Austin："><a href="#UT-Austin：" class="headerlink" title="UT- Austin："></a>UT- Austin：</h4><p>其实我甚至想把他放在tier2的第一个，但我怕uiuc的同学打我，而且UT的规模也不大。不过各个方向ut都还是做得不错的！而且陈平老师都住的地方，生活一定不那么困难！</p><h4 id="UCSD："><a href="#UCSD：" class="headerlink" title="UCSD："></a>UCSD：</h4><p>我觉得ucsd综合来看真的是很好的选择。各方向基本都有老师而且实力都还不错，像cv老师是又多又强。而且地处拉霍亚，冬天穿条短裤走路去沙滩的感觉不要太好。</p><h4 id="Gatech："><a href="#Gatech：" class="headerlink" title="Gatech："></a>Gatech：</h4><p>其实前两年我认为gt是最强的，奈何现在song le/hongyuan zha纷纷出走，其他一些老师沉迷industry不怎么在学校。但gt的底子还是很厚的，像cv/robotics都是十分的强。只是ml现在有点人去楼空。而且google也会在亚特兰大建新的分部，相信gt以后会更好。</p><h4 id="UCLA"><a href="#UCLA" class="headerlink" title="UCLA:"></a>UCLA:</h4><p>UCLA的ml这几年是真的不错。其他方向像nlp、dm这几年也都作出了一些不错的hiring。唯一就是cv方向现在朱松纯回国之后没什么人，可能也是以后要招人的方向。</p><h4 id="UMICH"><a href="#UMICH" class="headerlink" title="UMICH:"></a>UMICH:</h4><p>umich的sys很强，特别是arch方向，但ai真的一般。他最近做的几个hiring我也都认为一般，大家可以自己查csranking，人挺多，但个体实力我就不予置评了。当然像honglak这种没列出来，但他基本只招韩国人。</p><h4 id="COLUMBIA"><a href="#COLUMBIA" class="headerlink" title="COLUMBIA:"></a>COLUMBIA:</h4><p>哥大AI挺强的，基本上各个方向都有老师，就是许多老教师现在不是很活跃。每个方向的新老师也不是很多，基本上就一个。</p><h4 id="PENN"><a href="#PENN" class="headerlink" title="PENN:"></a>PENN:</h4><p>PENN的robotics和nlp都很强，像grasp基本涵盖了robotics所有的方向了。而且今年penn cs也在积极招新的faculty。</p><h4 id="HARVARD"><a href="#HARVARD" class="headerlink" title="HARVARD:"></a>HARVARD:</h4><p>也是只有ml这种偏理论的方向，应用方向要么缺门，要么相对弱势。当然，哈佛的econ+cs、tcs还有ml都是不错的。加上哈佛的牌子，能去还是很不错的。</p><h3 id="Tier3："><a href="#Tier3：" class="headerlink" title="Tier3："></a>Tier3：</h3><p>top30其他学校。其实像umd这种，实力也够tier2。所以我的分类准则是根据四大选手会选哪些做保底。就即便上了斯坦福的学生也会申请许多tier2的学校，但他们大概率不会申请tier3的学校了。不过tier3的学校也有很多很好的老师。BTW，我认为清华的ai实力在tier3，当然这没有考虑毕业出路等其他因素。</p><h2 id="选老师"><a href="#选老师" class="headerlink" title="选老师"></a>选老师</h2><p>其实老师比学校重要。老师主要是要看让你做什么，你做的topic直接影响你未来的出路。建议提前查看组里的同学都在做什么，以及他们毕业后的去向。基本这就是你未来的模板。然后还要关注和这个老师合作的舒适度，如果是个push或者放羊的主，你就要掂量掂量自己的个性了，毕竟五年快乐过下来比你做出多大成绩要重要。我见过很多北美phd读的很快乐的，也见过很多痛苦到quit的，主要的区别就是选了个什么样的老板。所以怎么能够掌握自己的方向都有哪些活跃的faculty，又怎么能够判断他们工作solid与否或者是否是rising star呢？除了csranking和官网，我还有一个建议是好好利用twitter。基本年轻的老师都会在上面推销自己的工作。而且有一些营销号，像AK，会转推好的arxiv new submission，比看arxiv daily高效多了，也比微信公众号那些花钱pr的paper质量好多了。</p><h2 id="套磁"><a href="#套磁" class="headerlink" title="套磁"></a>套磁</h2><p>我觉得其实对多数人没啥用，多数都是模板回复，毕竟多数人没到非你不可的地步。但我还是建议大家就像表白一样，宁可被拒也不要错过。就给自己选的professor of interest发一封邮件，说说自己对他的paper是多么的感兴趣。可能全是模板回复或者石沉大海，说欢迎申请或者你录取了我们详谈，但没准就有一个愿意和你面试呢。而且有些paper在投的同学，也可以通过email来和professor或者负责admission的staff来update你paper的情况。</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>基本所有学校都要有面试，第一轮基本在一月份，一般拿到面试就离offer很近了。多数学校的面试就是聊聊你cv上的paper，你想做的方向以及瞎扯淡。最重要的是放松，不要紧张，就正常的和老师交流，把你paper的细节清晰地说出来，从motivation到method再到取得的结果。然后要对面试老师近期的paper有所了解，建议仔细阅读他的homepage以及google<br>scholar。我相信大家经过和暑研老师的meeting肯定对这个驾轻就熟了。</p><h2 id="等结果"><a href="#等结果" class="headerlink" title="等结果"></a>等结果</h2><p>一般会在一月底二月初开始出结果，tier2的学校到三月份也会接着发，毕竟要等第一轮录取的学生是否接前面学校的offer。大家也可以利用这个时间和学校更新自己cv上在投paper的情况，个别老师也会在三月份再安排面试。总之，耐心等待吧，这个过程很煎熬的。</p><h2 id="非cs院系的ai"><a href="#非cs院系的ai" class="headerlink" title="非cs院系的ai"></a>非cs院系的ai</h2><p>其实除了cs系，ee/me这些院系也有做ai的，比如stanford的ee、Berkeley的me和mit的aeroastro。只不过他们光谱比较窄。ee基本偏signal processing，me基本只有robotics，这样到时候找工作的时候也会受限。比如me做robotics也基本都是去自动驾驶公司，相比之下cs做robotics的选择会宽的多。教职的话就更不用说了，cs做ai的可以找ee的教职，但ee做ai的找cs教职难度层级大大提高。所以即便差一层级的学校，建议大家还是优选cs，如果你想做ai的话。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ms的情况我写不动了，过两天我再开一个洞写一写。<br>所以总结一下timeline就是：认真刷gpa-&gt;srt或者联系老师去搬砖-&gt;考托福和GRE-&gt;联系暑研-&gt;拿到重要的海外推荐信-&gt;整理ps&amp;cv-&gt;在申请网站上填申请-&gt;套磁-&gt;面试-&gt;等offer-&gt;决定去哪里-&gt;办签证买机票。</p><h1 id="MS-正文"><a href="#MS-正文" class="headerlink" title="MS 正文"></a>MS 正文</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暌违日久，前来兑现承诺，写一写美国mscs的申请经验。</p><p>之所一直拖着，一方面自然是因为我拖延症晚期又发作了，另一方面这东西难写的程度让我望而却步。在我看来，phd申请同质化很高，大可以one to rule them all（魔戒烂梗。。。），但ms申请真的是五花八门，不同项目之间差异太大，很难找到一根主线把所有项目全串起来。所以啊，我先大致提纲挈领地写一写，然后还是得把每个学校每个项目逐个分析。当然请首先阅读本文的前传，也就是AI PhD的申请经验🕳，毕竟ms申请的timeline和准备的材料大同小异，所不同之处主要还是在项目本身。</p><p>所以要怎么提纲挈领呢？我想谈两件事，第一个，我们申请ms要看什么？第二个，ms招生的又看我们什么？</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>申请美国cs的master，目标无外乎三个，留美工作、准备继续深造读phd、回国工作。</p><p>留美工作大概是多数人的目标。基本的流程就是上课刷题、cpt实习，opt，抽h1b，排绿卡，所有学校所有项目都是如此。但上学只能去一个项目，自然是要优中选优，选最好的那个念。所以我经常碰到很多人会问的一个问题是A项目和B项目哪个好啊？我的答案很多时候是不知道。因为选项目最重要的是适合自己，有些项目再好，但是不符合你自身的现状或者预期目标，那对你就不是好项目。一般来说一个ms项目首先值得关心的是年限问题。一般ms项目都是两年，当然也可以提前毕业，但也有的meng项目只有一年。一年的项目往往意味着没有cpt，也就是不能暑假实习，也就是到了美国就要开始找full time job。当然例如cmu的某些项目暑假还要上课，这也意味着没有full-time cpt，暑假也无法实习。如果你大三暑假或者大四的暑假没有在比如google、msft、amzn这种知名实习过，那你直接怼全职就很困难。要知道你opt结束之后只有60天的grace period，没工作申请不了opt过了60天就要离境。所以对于那些实习不丰富，或者算法题还没刷的很熟练的，建议还是优选两年的项目比较好。但两年项目也有很大的不同。虽然很多人说美国念什么项目无所谓，都能拿面试，到时候就看你自 leetcode刷的如何。我做了很多的统计和调研，发现根本不是这么回事儿，很多人都只能拿到一部分公司的面试，也就是说拿面试这就是第一道坎，很多人在这儿就折戟沉沙了。那么怎么才能拿到面试呢？首先，你的cv要和cs高度相关，如果你背景全是finance或者financial engineering，你申请sde肯定会被直接pass，申请data scientist还差不多。这也是为什么明明ee的项目也能做sde而且ee的项目明显好申请，但还是那么多人往cs的master program上去挤。而且cs背景不仅能帮助你拿面试，还能帮你拿多的工资哦。然后呢，面试还要考虑到peer pressure。有些公司比如fb就很讲究diversity，这也意味着很多学校有一个headcount的上限。像cmu这种内卷大校，你要是简历不能出类拔萃很可能连fb的面试都无。因为career fair上的一抓一大把，你要找不到靠谱内推，很可能直接被刷掉了。其次，地理位置也有影响。由于IT公司集中在西海岸，我听到的普遍反映是西海岸学校的cf要比东海岸学校的cf上的公司多，当然主要是中小公司，因为flag这种都是全国招聘。而东海岸像纽约一般fintech的公司会多一些。</p><p>所以拿到面试之后的第二件事就是面试了，这我觉得没啥好说的，就是刷题，你不刷个300道leetcode，我都替你在白板上写code这事感到心里没底儿。现在疫情期间，感觉也没onsite了，基本都是online做题。具体经验请参考一亩三分地。很多公司会出很多原题，像fb似乎全是他那个tag的原题，当然google就很喜欢出新题，甚至偶尔还会出一些面试官都不知道确切答案的题出来XD。当然，除了算法题还有behavior面试，像amazon就很重视这玩意儿。大家准备面试呢，还是要平衡好上课和刷题这两个事儿。当然啦，你读ms本质是买了个opt，在我看来刷题找工作才是正事儿，读书上学那是副业。因为ms时间很短，不像本科或者phd那样有时间让你探索自我，所以还是要功利一点。而且要是真喜欢上课的话，完全可以找到full time之后慢慢上个够。所以啊，大家还是要根据自身情况选择课程硬核还是更flexible的项目。</p><p>那面试拿到实习offer之后就match组，match到了满意的之后就可以直接快进到summer intern了。所有人都喜欢去fb实习不只是fb钱多，更是因为fb可以直接给reutrn offer，而万恶的google实习了还得再面两轮（不实习是5轮）。一般暑假努力干就是为了这个return。有return之后第一个好处是稳定心态，第二个是你找其他工作可以compete offer。像google这样的，要是你没有其他offer compete，给你的package就很低。而且一般intern表现好的，都更容易拿到更大的package。</p><p>一个package的主要组成就是base+股票+signon。像google的等级，一般本科和ms进去是L3，phd是L4，但有些ms也能L4，一般是发了paper的ms，因为在美国mle&gt;sde&gt;data scientist。L3的base一般是11-14w，L4能到17w左右。像cmu这种技校就十分贴心地公开了所有项目的毕业生拿到的base salary的统计：<a href="https://www.cmu.edu/career/outcomes/post-grad-dashboard.html">https://www.cmu.edu/career/outcomes/post-grad- dashboard.html</a><a href="https://www.cmu.edu/career/outcomes/post-grad-dashboard.html"></a>。大家可以选择master+scs+自己心仪的program看看出路。至于股票的话，一般都是四年为期，多数人都是4年20万左右。很多人虽然base不高，但股票多，特别是最近美股坐着火箭一样往上涨，今年到现在就涨了40%，所以package总和可能特别高，像phd的base一般也不比ms高多少，但是股票一般没上线，像今年有个phd去adobe research就拿了40多万的股票。另一笔钱是签字费，只有第一年有，一般就几万，fb的上限是10w。所以一般一个经典的fresh grad package就是12w+20w/4+7.5w/4=18.875w，差不多就是一个正常水平的新员工的税前package。当然税后能到手的也就60%，因为加州税太tm多。所以很多人往西雅图跑，因为华州没有9%多的州税，只有联邦税，所以很多人算了一下同样的package能比加州一年多拿一万多。当然西雅图的税前也要比加州低，所以总算起来其实税后差不多，但是西雅图的各种开支更低，房价更是只有湾区的一半出头。所以就看大家愿不愿意给CA政府交阳光税了。不过疫情之后似乎西雅图和湾区的税前package也差不多了，可能是因为大家都wfh吧。。。</p><p>毕业后full time一般要用opt实习，然后在opt实习期间要抽h1b，一般opt期间能抽三次。但很多人都提前毕业赶在3月前入职，主要是h1b抽签在4月，这样能抽4次。一般抽三次的最后命中率是7成，命中不了就回国、去加拿大或者在读个professional program继续进入opt-&gt;h1b的循环之中。而且虽然名义上人人平等，我直觉感觉这个抽签明显偏向高学历，当然也可能是统计偏差。如果想长期留美，还可以排绿卡，一般硕士排eb2，phd只要别太水可以排eb1，期限短很多。当然啦，作为清华的学生还是不鼓励大家申请绿卡啦。</p><p>如果一毕业就想回国，其实找国内的实习或者full-time就好了。</p><h2 id="深造"><a href="#深造" class="headerlink" title="深造"></a>深造</h2><p>上面说的都是找工作的东西，对于少部分有意读博深造的，我建议是先确认老板。虽然有些人管cmu的msr、mlt和uiuc的mscs叫研究型项目，但在我看来不准确，美国所有项目都可以做研究，一年的meng也可以，学校老板可以不搭理其他学校的套磁，但自己学校的任何一名学生发邮件想做research他都会答应。那些所谓的研究型项目不过是必须做研究和肯定有funding罢了。研究型项目可不是能随便选老板的，要看老板有没有以及你的竞争对手的情况。想想一整个项目几十个人都要做research的盛况，你首先真不一定能去你最心仪的老板，像cmu ri的很多做cv的老师已经不招master了，其次你老板手底下可不止你一个人，到时候申请的时候不可能全留下，顶多留一两个。所以不要觉得录了这种研究型项目然后接着读该校的phd就稳了，你很可能到时候还是正常申请，只能说你留校读phd的可能性比其他人大一些，但是没留校和其他人的情况是一样的。而且要是碰到个给你安排个不好发paper方向的advisor，你的申请还很可能处于一个不利的地位。所以啊，我建议还是先确定潜在的ms advisor，这个人要愿意要你，而且最好你的水平能留下，申请还是得留个保底。而且ms申请是一定要有pub的，所以一定要找个近年发paper多的，最好是找个ap，毕竟不像senior的老教授对文章要求那么高，更方便多水几篇。</p><h2 id="选项目"><a href="#选项目" class="headerlink" title="选项目"></a>选项目</h2><p>所以这些五花八门的ms项目是如何选择我们的呢？其实标准完全不一样。像cmu scs的很多项目，特别是mld、ri、lti的项目主要是要背景match，言外之意就是要你有相关的research经历，最好是有paper，sde实习的不太管用。但一般其他的mscs项目则比较一视同仁。但是东部的藤校比较重视gpa或者托福这种标化成绩，公立学校感觉重视程度低一点点。有些像uiuc这样的学校因为mscs是给funding做research的，所以一般比较看重本校的推荐信。当然啦，我觉得这还得case by case，逐个项目给大家分析。至于准备和流程，基本和phd申请一毛一样，区别主要在于各项加权的方法有差异。</p><p>我在下面的回复里按usnews的排名给大家分析一下top30的学校cs方向的ms program。</p><h2 id="逐学校分析"><a href="#逐学校分析" class="headerlink" title="逐学校分析"></a>逐学校分析</h2><h3 id="Stanford"><a href="#Stanford" class="headerlink" title="Stanford"></a>Stanford</h3><p>mscs要么top5+3.95gpa，要么是3.8+的gpa加上一作paper两篇，或者有ugvr强推+突出的特长点。</p><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>没有mscs项目，meng是给本科4+1的，phd能中途拿一个ms。似乎也没有相近的cs program，可能media lab是一个？但那个需要考雅思，而且很难。</p><h3 id="Berkeley"><a href="#Berkeley" class="headerlink" title="Berkeley"></a>Berkeley</h3><p>ms是本校的博士预科班，一年的meng的bar并不很高，基本gpa3.75就大有希望。只不过呢，这项目不是纯正的cs项目，要上leadership的课，其实比较浪费时间的。现在似乎meng也能延期了，但似乎申请延期的过程也是遭到了很多吐槽，需要进一步查证。</p><h3 id="CMU"><a href="#CMU" class="headerlink" title="CMU"></a>CMU</h3><p>CMU：我就是不想写cmu艹，这项目也太多了。。。</p><p>先来scs吧。</p><h4 id="csd"><a href="#csd" class="headerlink" title="csd"></a>csd</h4><p>也即mscs，没啥好说的，bar稍微低一点的stanford mscs，录得就是gpa学霸。</p><h4 id="mld"><a href="#mld" class="headerlink" title="mld"></a>mld</h4><p>mld名义是就业项目，但很多人还是做research读phd，整体人比较少，竞争压力小，十足的好项目啊！！！</p><h4 id="ri"><a href="#ri" class="headerlink" title="ri"></a>ri</h4><p>msr是一定要嗑盐的，但整体做robotics的老板更好找，做cv的不好找，这就使得另一个项目mscv现在变得格外不适合嗑盐，但找工作还是很香的。这两个项目我看现在有research背景已经不够了，是最好有paper了。另一个项目msrd的bar要低一些，主要是robotics系统设计，找工作也比另两个差一些，毕竟robo项目比cs找工作还是要难。</p><h4 id="lti"><a href="#lti" class="headerlink" title="lti"></a>lti</h4><p>mlt也是个research项目，miis和mscv的地位差不多，这俩也是比较prefer有paper的。mcds是找工作王牌项目，有data、system、hci三个track，适合各种方向的申请者。课程也很硬核。msaii就有点儿水，倾向非cs背景转专业的，而且学费更贵。</p><h4 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h4><p>项目太多，我一个申请phd的也搞不明白，就知道他申请要面试，面试要写code。而且有些还暑假上课不能实习，小心雷坑。</p><h4 id="HCII"><a href="#HCII" class="headerlink" title="HCII"></a>HCII</h4><p>mhci就很难，而且英语要求也比其他专业高，托福最好能110以上，口语能26。education tech &amp; applied learning science就要水不少啦</p><h4 id="CBD"><a href="#CBD" class="headerlink" title="CBD"></a>CBD</h4><p>Computational Biology Department：吾尝闻mscb挺水的。。。很多人在一亩三分地上吐槽他是个坑</p><h4 id="INI"><a href="#INI" class="headerlink" title="INI"></a>INI</h4><p>msin就一小号的mcds。msit和isr的项目一样复杂，大家自己看看具体内容吧，我也没有仔细阅读过。</p><h4 id="ECE"><a href="#ECE" class="headerlink" title="ECE"></a>ECE</h4><p>ee、自动化的同学也可以申请这个。</p><h4 id="heinz"><a href="#heinz" class="headerlink" title="heinz"></a>heinz</h4><p>mism比较适合信管或者经管转码的同学申请，也有好多track，我也不是很懂，cmu为了赚钱真是疯了……出路我看基本多数是data scientist。</p><h4 id="cmu-sv"><a href="#cmu-sv" class="headerlink" title="cmu-sv"></a>cmu-sv</h4><p>硅谷校区，没啥老师，不咋上课，或者课程质量很低，适合来美国就是为了找工作然后开始养老旅游的人。</p><h3 id="UIUC"><a href="#UIUC" class="headerlink" title="UIUC"></a>UIUC</h3><p>mscs是个research program，喜欢有uiuc推荐信的，mcs是个就业项目，感觉bar也不是很高？可能介于columbia和Berkeley的meng之间？</p>]]></content>
      
      
      <categories>
          
          <category> 出国申请 </category>
          
          <category> 经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/11/hello-world/"/>
      <url>/2022/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hi there! 这是我的第一篇文章。</p><p>希望用博客记录下学习、生活和出国申请经验，顺便储存一些资料。</p><h2 id="如何搭建博客"><a href="#如何搭建博客" class="headerlink" title="如何搭建博客"></a>如何搭建博客</h2><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol><li><p><a href="https://butterfly.js.org/">Doc</a></p></li><li><p><a href="https://ljguo1020.github.io/2022/02/18/test/">Butterfly 主题的使用</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/404320856">零基础使用hexo搭建butterfly主题的博客 - 这个很靠谱，顺利登录localhost</a></p></li><li><p><a href="https://imlql.cn/post/bb283ed3">Hexo搭建博客-butterfly主题新版教程</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/156915260">Hexo博客写文章及基本操作</a></p></li><li><p><a href="https://icimence.cn/2020/06/09/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/">hexo博客文章加密 - 这人也有bug，哈哈</a></p></li><li><p><a href="https://blog.csdn.net/sunxiaobai1/article/details/122863031">(40条消息) hexo-butterfly主题配置_A孙大壮的博客-CSDN博客_butterfly主题配置</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/348131730">hexo博客中tags与categories用法</a></p></li><li></li></ol><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>在项目根目录操作即可，也可以在source/_posts目录下创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>登录git只能用浏览器登录，密码登录已禁用，token不知为什么不行</p><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">  hexo g</span><br><span class="line">  git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">  git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">  <span class="comment">#以上两步来自 </span></span><br><span class="line">  <span class="comment">#解决Failed to connect to github.com port 443 after 21098 ms: Timed out</span></span><br><span class="line">  hexo d </span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>也许可以备份到gitlab?</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>做极都唔掂，丢</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><a href="https://sm.ms/">Image Upload - SM.MS - Simple Free Image Hosting</a></p><h2 id="latex公式"><a href="#latex公式" class="headerlink" title="latex公式"></a>latex公式</h2><p>在文章开头描述中设置mathjex属性</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Markdown<span class="emphasis">_math_</span>formula<span class="emphasis">_char </span></span><br><span class="line"><span class="emphasis">tags: markdown </span></span><br><span class="line"><span class="emphasis">abbrlink: 475360334 </span></span><br><span class="line"><span class="emphasis">date: 2022-02-19 09:41:53 </span></span><br><span class="line"><span class="emphasis">comments: true </span></span><br><span class="line"><span class="emphasis">mathjax: true</span></span><br></pre></td></tr></table></figure><h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p><a href="https://blog.ling71.cn/posts/1518592324.html">latex公式问题</a></p><p><a href="https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/">成功解决在hexo中无法显示数学公式的问题 | 初心 (runninggump.github.io)</a></p><h2 id="git如何上传大于100M文件？"><a href="#git如何上传大于100M文件？" class="headerlink" title="git如何上传大于100M文件？"></a>git如何上传大于100M文件？</h2><p><a href="https://wanlizhao.top/2021/04/21/%E3%80%90git%E3%80%91git%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E8%B6%85%E8%BF%87100M%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/">【git】git如何上传超过100M的大文件 | 巧克力梦工厂 (wanlizhao.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
